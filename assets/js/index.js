document.addEventListener("DOMContentLoaded",(function(){const e={$el:e=>document.querySelector(e),setState:()=>{sessionStorage.setItem("state",JSON.stringify(e.$el(".index-main").innerHTML))},clearState:()=>{sessionStorage.removeItem("state")},initStateLinks:()=>{setTimeout(()=>{document.querySelectorAll(".state-link").forEach(t=>t.addEventListener("click",()=>{e.setState()}))},1e3)},isState:()=>!!sessionStorage.getItem("state"),isDesktop:()=>window.innerWidth>=996,expandPrimarySection:t=>{const s=e.$el(".section-slider"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),n=s.querySelector('[data-name="projects"]'),o=s.querySelector('[data-name="media"]'),a=t.querySelector(`[data-position-${t.dataset.name}="outer"]`),r=t.querySelectorAll(`[data-position-${t.dataset.name}="inner"]`);switch(console.log(r),e.initStateLinks(),t.style.width="100%",t.dataset.name){case"about":l.style.left="100%",n.style.right="-50%",o.style.right="-70%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-3").classList.add("slide-3__scrolled")}));break;case"hobby":i.style.left="-25%",t.style.left=0,n.style.right="-25%",o.style.right="-50%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>{console.log(e),e.style.display="block"})}));break;case"projects":i.style.left="-50%",l.style.left="-25%",t.style.right=0,o.style.right="-25%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-2").classList.add("slide-2__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>e.style.display="block")}));break;case"media":i.style.left="-75%",l.style.left="-50%",n.style.right="100%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.querySelector(".slide-2").addEventListener("animationend",(function(){}))}sessionStorage.setItem("order",t.dataset.order)},expandPrimarySectionOnDesktop:t=>{const s=e.$el(".section-slider-desktop"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),o=s.querySelector('[data-name="projects"]'),r=s.querySelector('[data-name="media"]');switch(a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),t.style.width="95%",sessionStorage.setItem("order",t.dataset.order),t.dataset.name){case"about":t.querySelector(".section-desktop__content").style.right="calc(100% - 413px)",i.style.left="2.5%",l.style.left="97.5%",o.style.right="-25%",r.style.right="-90%";break;case"hobby":t.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",l.style.left="2.5%",o.style.right="-10%",r.style.right="-40%";break;case"projects":t.querySelector(".section-name").style.left="0",i.style.left="-50%",l.style.left="-20%",o.style.right="2.5%",r.style.right="-30%";break;case"media":i.style.left="-60%",l.style.left="-30%",o.style.right="97.5%",r.style.right="2.5%"}e.initStateLinks()},changePage:t=>{t.preventDefault(),e.$el("main").classList.add("page-changing"),e.clearState(),setTimeout(()=>window.location.href=t.target.href,700)},checkIsActiveLink:e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")}},t=document.getElementById("animationsPolygon"),s=document.getElementById("hamburgerSection"),i=e.$el(".primary"),l=e.$el(".news"),n=(e,t=2,s=15,i=!0)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(s),scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:i&&{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),this.slides.forEach((t,s)=>{s===e?t.querySelector(".active-content").classList.remove("active-content__inactive"):t.querySelector(".active-content").classList.add("active-content__inactive")})}}})},a=e=>new Swiper(e,{direction:"vertical",slidesPerView:"auto",freeMode:!0,scrollbar:{el:".swiper-scrollbar"},mousewheel:!0});let r=!1;const d=setInterval(()=>{s.querySelector(".active")&&e.$el(".hamburger__section__finally_opened")&&(e.checkIsActiveLink(e.$el(".active")),r=!0),r&&clearInterval(d)},100);t.insertAdjacentElement("afterbegin",s.cloneNode(!0)),t.querySelector("#hamburgerSection").id="";const c=t.querySelectorAll("a");if(c.forEach((e,t)=>{t!==c.length-1&&(e.style.width="auto",e.style.visibility="visible")}),e.$el(".desktop-links").querySelectorAll("a").forEach(t=>t.addEventListener("click",(function(t){e.changePage(t)}))),s.addEventListener("click",(function(t){s.classList.add("hamburger__section__opened"),s.addEventListener("animationend",()=>{s.classList.add("hamburger__section__finally_opened"),s.querySelectorAll("a").forEach((t,s)=>{s!==c.length-1&&(t.style.width=c[s].offsetWidth+"px",t.addEventListener("click",(function(t){e.changePage(t)})))})})})),i)if(e.isState())e.isDesktop()?(o(sessionStorage.getItem("order")),a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),e.$el("main").style.opacity="1"):(new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(sessionStorage.getItem("order"))}),a("#mobileVerticalTextSlider"),n(".projects-slider",2,15,!1),n(".hobby-slider",2,15,!1),n(".podcast-slider",2,15,!1),e.$el("main").style.transition="all .25s",setTimeout(()=>e.$el("main").style.opacity="1",1400)),e.initStateLinks(),e.clearState();else{e.$el("main").style.opacity="1";document.getElementById("primarySlider");const t=document.querySelectorAll(".section"),s=e.$el(".section-slider-desktop").querySelectorAll(".section-desktop"),i=document.getElementById("primarySwiperDesktop"),l=e.$el(".inner-section-slider");t.forEach(t=>{t.addEventListener("click",(function(){const s=t.querySelector(".slide-1").nextElementSibling;s.querySelector(".inner-section-slider")||(s.insertAdjacentElement("afterbegin",l.cloneNode(!0)),l.innerHTML=""),e.expandPrimarySection(t),setTimeout(()=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(t.dataset.inner)})},400),setTimeout(()=>{a("#mobileVerticalTextSlider")},950),setTimeout(()=>{n(".hobby-slider",2,15,!1)},1450),setTimeout(()=>{n(".projects-slider",2,15,!1),n(".podcast-slider",2,15,!1)},1700)}))}),s.forEach(t=>{t.addEventListener("click",(function(){o(t.dataset.order),e.expandPrimarySectionOnDesktop(t),t.addEventListener("transitionend",()=>{i.style.top="0",setTimeout(()=>{i.classList.add("showed")},350)})}))})}if(e.$el(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"},breakpoints:{996:{slidesPerView:2}}}),l){r&&clearInterval(d);let e=200;l.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})}e.$el(".single-page")&&new Swiper(".singlepagedesktop-",{direction:"vertical",loop:!0,slidesPerView:"auto",spaceBetween:15,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".singlepagedesktop-next",prevEl:".singlepagedesktop-prev",lockClass:"d-none"}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInV0aWxzIiwiJGVsIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwic2V0U3RhdGUiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJpbm5lckhUTUwiLCJjbGVhclN0YXRlIiwicmVtb3ZlSXRlbSIsImluaXRTdGF0ZUxpbmtzIiwic2V0VGltZW91dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsaW5rIiwiaXNTdGF0ZSIsImdldEl0ZW0iLCJpc0Rlc2t0b3AiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiZXhwYW5kUHJpbWFyeVNlY3Rpb24iLCJzZWN0aW9uIiwicHJpbWFyeVdyYXBwZXIiLCJhYm91dCIsImhvYmJ5IiwicHJvamVjdHMiLCJtZWRpYSIsImlubmVyTmFtZSIsImRhdGFzZXQiLCJuYW1lIiwic3R5bGUiLCJ3aWR0aCIsImxlZnQiLCJyaWdodCIsImNsYXNzTGlzdCIsImFkZCIsImZvckVhY2giLCJkaXNwbGF5IiwibG9nIiwib3V0ZXJOYW1lIiwib3JkZXIiLCJleHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcCIsImRlc2t0b3BQcmltYXJ5V3JhcHBlciIsImluaXRWZXJ0aWNhbFNsaWRlciIsImluaXRWZXJ0aWNhbFRleHRTbGlkZXIiLCJlIiwibG9jYXRpb24iLCJocmVmIiwidGFyZ2V0IiwiY2hlY2tJc0FjdGl2ZUxpbmsiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZ2V0RWxlbWVudEJ5SWQiLCJwcmltYXJ5Iiwic3BhY2VCZXR3ZWVuIiwiaXNOYXZpZ2F0aW9uIiwiU3dpcGVyIiwiYW5pbWF0aW9uc1BvbHlnb24iLCJoYW1idXJnZXJNZW51Iiwic2xpZGVzUGVyVmlldyIsIk51bWJlciIsInNjcm9sbGJhciIsIm9uIiwiYWZ0ZXJJbml0IiwiZGVsYXkiLCJ0aGlzIiwic2xpZGUiLCJuIiwib3BhY2l0eSIsImtleWJvYXJkIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInNsaWNlIiwiaW5kZXhPZiIsInByZXZFbCIsImxvY2tDbGFzcyIsImluaXRpYWxTbGlkZVBvc2lpdG9uIiwibG9vcCIsImxvb3BlZFNsaWRlcyIsImNlbnRlcmVkU2xpZGVzIiwiaW5pdGlhbFNsaWRlIiwiaW5pdERlc2t0b3BJbm5lclNsaWRlciIsImVuYWJsZWQiLCJhY3RpdmVJbmRleCIsInNsaWRlcyIsInN3aXBlclNsaWRlSW5kZXgiLCJvbmx5SW5WaWV3cG9ydCIsInJlbW92ZSIsImRpcmVjdGlvbiIsImZyZWVNb2RlIiwiZWwiLCJtb3VzZXdoZWVsIiwiaXNNYXJrZWQiLCJtZW51SW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9uZU5vZGUiLCJpZCIsImhlYWRlckxpbmtzQ29weSIsImEiLCJpIiwidmlzaWJpbGl0eSIsImNoYW5nZVBhZ2UiLCJsZW5ndGgiLCJvZmZzZXRXaWR0aCIsInNsaWRlQ2hhbmdlIiwidHJhbnNpdGlvbiIsInByaW1hcnlTZWN0aW9ucyIsInByaW1hcnlTbGlkZXJTZWN0aW9uIiwiJGlubmVyU2xpZGVyRWwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJ3cmFwcGVyIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiaW5uZXIiLCJkZXNrdG9wUHJpbWFyeVNlY3Rpb25zIiwidG9wIiwiZGVza3RvcFByaW1hcnlJbm5lclNsaWRlciIsInZlcnRpY2FsQ2xhc3MiLCJicmVha3BvaW50cyIsIm5ld3MiLCJpdGVtIiwiOTk2Il0sIm1hcHBpbmdzIjoiQUFBQUEsU0FBU0MsaUJBQWlCLG9CQUFvQixXQUMxQyxNQUFNQyxFQUFRLENBQ1BDLElBQUdDLEdBQWFKLFNBQVNLLGNBQWNELEdBQzFDRSxTQUFVLEtBQ05DLGVBQWVDLFFBQVEsUUFBY0MsS0FBQUEsVUFBZ0JOLEVBQUlBLElBQUEsZUFBZU8sYUFFNUVDLFdBQVksS0FDUkosZUFBZUssV0FBVyxVQUU5QkMsZUFBZ0IsS0FFWkMsV0FBaUIsS0FD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TDhCLEdBTTlCTyxVQUFXLENBQ1B3RCxjQUFlLFVBRWZ2RCxHQUFBLENBQ0FDLFVBQVcsV0FDRSxJQUFHQyxFQUFaLElBQ0tvQixLQUFPL0MsT0FBUzZCLFFBQUQsQ0FBQUEsRUFBY0MsS0FDbkJ0RCxXQUFNLEtBQ0R1RCxFQUFackMsTUFBQXFDLFFBQUEsS0FESkosR0FHQUEsR0FBQSxRQUlaSyxTQUFVLENBQ0NhLFNBREQsRUFFTkksZ0JBQWdCLEdBRXBCSyxZQXhCOEIsRUEwQjlCckIsV0FBWSxDQUNDQyxPQUFBLDBCQUNBRyxPQUFBLDBCQUNUQyxVQUFXIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IHV0aWxzID0ge1xyXG4gICAgICAgICRlbDogKHNlbGVjdG9yKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcclxuICAgICAgICBzZXRTdGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdzdGF0ZScsIEpTT04uc3RyaW5naWZ5KHV0aWxzLiRlbCgnLmluZGV4LW1haW4nKS5pbm5lckhUTUwpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xlYXJTdGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdzdGF0ZScpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0U3RhdGVMaW5rczogKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDQodGB0YvQu9C60LgsINC/0YDQuCDQutC70LjQutC1INC90LAg0LrQvtGC0L7RgNGL0YUg0YHQvtGF0YDQsNC90Y/QtdGC0YHRjyDRgdC+0YHRgtC+0Y/QvdC40LUg0YTRgNC+0L3RgtCwINC90LAg0LPQu9Cw0LLQvdC+0Lkg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RhdGUtbGluaycpXHJcbiAgICAgICAgICAgICAgICBzdGF0ZUxpbmtzLmZvckVhY2gobGluayA9PiBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnNldFN0YXRlKClcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9LCAxMDAwKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTdGF0ZTogKCkgPT4gISFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdzdGF0ZScpLFxyXG4gICAgICAgIGlzRGVza3RvcDogKCkgPT4gd2luZG93LmlubmVyV2lkdGggPj0gOTk2LFxyXG4gICAgICAgIGV4cGFuZFByaW1hcnlTZWN0aW9uOiAoc2VjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcmltYXJ5V3JhcHBlciA9IHV0aWxzLiRlbCgnLnNlY3Rpb24tc2xpZGVyJylcclxuICAgICAgICAgICAgY29uc3QgYWJvdXQgPSBwcmltYXJ5V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYW1lPVwiYWJvdXRcIl0nKVxyXG4gICAgICAgICAgICBjb25zdCBob2JieSA9IHByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJob2JieVwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RzID0gcHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cInByb2plY3RzXCJdJylcclxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBwcmltYXJ5V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYW1lPVwibWVkaWFcIl0nKVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3V0ZXJOYW1lID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wb3NpdGlvbi0ke3NlY3Rpb24uZGF0YXNldC5uYW1lfT1cIm91dGVyXCJdYClcclxuICAgICAgICAgICAgY29uc3QgaW5uZXJOYW1lID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1wb3NpdGlvbi0ke3NlY3Rpb24uZGF0YXNldC5uYW1lfT1cImlubmVyXCJdYClcclxuICAgICAgICAgICAgY29uc29sZS5sb2coaW5uZXJOYW1lKVxyXG4gICAgICAgICAgICB1dGlscy5pbml0U3RhdGVMaW5rcygpXHJcbiAgICAgICAgICAgIHNlY3Rpb24uc3R5bGUud2lkdGggPSAnMTAwJSdcclxuICAgICAgICAgICAgc3dpdGNoIChzZWN0aW9uLmRhdGFzZXQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWJvdXQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy03MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0xJykuY2xhc3NMaXN0LmFkZCgnc2xpZGUtMV9fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0zJykuY2xhc3NMaXN0LmFkZCgnc2xpZGUtM19fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdob2JieSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctMjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uc3R5bGUubGVmdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnLTI1JSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTmFtZS5mb3JFYWNoKG5hbWUgPT4gbmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMScpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTFfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1uYW1lJykuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi1uYW1lX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTInKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0yX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJOYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJOYW1lLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhuYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwcm9qZWN0cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTI1JSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5yaWdodCA9IDBcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctMjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTmFtZS5mb3JFYWNoKG5hbWUgPT4gbmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMicpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTJfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1uYW1lJykuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi1uYW1lX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJOYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJOYW1lLmZvckVhY2gobmFtZSA9PiBuYW1lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNzUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTUwJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICAvLyBtZWRpYS5zdHlsZS5yaWdodCA9ICctMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTEnKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0xX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTInKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0yX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0yJykuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge30pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCBzZWN0aW9uLmRhdGFzZXQub3JkZXIpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcDogKHNlY3Rpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGVza3RvcFByaW1hcnlXcmFwcGVyID0gdXRpbHMuJGVsKCcuc2VjdGlvbi1zbGlkZXItZGVza3RvcCcpXHJcbiAgICAgICAgICAgIGNvbnN0IGFib3V0ID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJhYm91dFwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IGhvYmJ5ID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJob2JieVwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RzID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJwcm9qZWN0c1wiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJtZWRpYVwiXScpXHJcbiAgICAgICAgICAgIGluaXRWZXJ0aWNhbFRleHRTbGlkZXIoJyNkZXNrdG9wVmVydGljYWxUZXh0U2xpZGVyJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcuaG9iYnlkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcucHJvamVjdHNkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcubWVkaWFkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS53aWR0aCA9ICc5NSUnXHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ29yZGVyJywgc2VjdGlvbi5kYXRhc2V0Lm9yZGVyKVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHNlY3Rpb24uZGF0YXNldC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhYm91dCc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1kZXNrdG9wX19jb250ZW50Jykuc3R5bGUucmlnaHQgPSAnY2FsYygxMDAlIC0gNDEzcHgpJ1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3V0LnN0eWxlLmxlZnQgPSAnMi41JSdcclxuICAgICAgICAgICAgICAgICAgICBob2JieS5zdHlsZS5sZWZ0ID0gJzk3LjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy0yNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTkwJSdcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hvYmJ5JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLWRlc2t0b3BfX2NvbnRlbnQnKS5zdHlsZS5sZWZ0ID0gJzBweCdcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy0zMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy0xMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTQwJSdcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2plY3RzJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLW5hbWUnKS5zdHlsZS5sZWZ0ID0gJzAnXHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTIwJSdcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy0zMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNjAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTMwJSdcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICc5Ny41JSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHV0aWxzLmluaXRTdGF0ZUxpbmtzKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNoYW5nZVBhZ2U6IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5jbGFzc0xpc3QuYWRkKCdwYWdlLWNoYW5naW5nJylcclxuICAgICAgICAgICAgdXRpbHMuY2xlYXJTdGF0ZSgpXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlLnRhcmdldC5ocmVmLCA3MDApXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGVja0lzQWN0aXZlTGluazogKGxpbmspID0+IHtcclxuICAgICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICBsaW5rLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnYWN0aXZlLWRpdmlkZXInKVxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYW5pbWF0aW9uc1BvbHlnb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5pbWF0aW9uc1BvbHlnb24nKVxyXG4gICAgY29uc3QgaGFtYnVyZ2VyTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoYW1idXJnZXJTZWN0aW9uJylcclxuICAgIGNvbnN0IHByaW1hcnkgPSB1dGlscy4kZWwoJy5wcmltYXJ5JylcclxuICAgIGNvbnN0IG5ld3MgPSB1dGlscy4kZWwoJy5uZXdzJylcclxuXHJcbiAgICBjb25zdCBpbml0VmVydGljYWxTbGlkZXIgPSAoJGVsLCBzbGlkZXNQZXJWaWV3ID0gMiwgc3BhY2VCZXR3ZWVuID0gMTUsIGlzTmF2aWdhdGlvbiA9IHRydWUpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFN3aXBlcigkZWwsIHtcclxuICAgICAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IHNsaWRlc1BlclZpZXcsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogTnVtYmVyKHNwYWNlQmV0d2VlbiksXHJcbiAgICAgICAgICAgIHNjcm9sbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgdmVydGljYWxDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkZWxheSA9IDUwMFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuc3R5bGUub3BhY2l0eSA9ICcxJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBkZWxheSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXkgKz0gMjAwXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW91c2V3aGVlbDogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgICAgICAgbmF2aWdhdGlvbjogaXNOYXZpZ2F0aW9uICYmIHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYCR7JGVsLnNsaWNlKDAsICRlbC5pbmRleE9mKCctJykpfS1uZXh0YCxcclxuICAgICAgICAgICAgICAgIHByZXZFbDogYCR7JGVsLnNsaWNlKDAsICRlbC5pbmRleE9mKCctJykpfS1wcmV2YCxcclxuICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbml0RGVza3RvcElubmVyU2xpZGVyID0gKGluaXRpYWxTbGlkZVBvc2lpdG9uKSA9PiB7XHJcbiAgICAgICAgbmV3IFN3aXBlcignLnByaW1hcnktc3dpcGVyLWRlc2t0b3AnLCB7XHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIGxvb3BlZFNsaWRlczogNCxcclxuICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IHRydWUsXHJcbiAgICAgICAgICAgIGluaXRpYWxTbGlkZTogTnVtYmVyKGluaXRpYWxTbGlkZVBvc2lpdG9uKSxcclxuICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCB0aGlzLnNsaWRlc1thY3RpdmVJbmRleF0uZGF0YXNldC5zd2lwZXJTbGlkZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID09PSBhY3RpdmVJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUucXVlcnlTZWxlY3RvcignLmFjdGl2ZS1jb250ZW50JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlLWNvbnRlbnRfX2luYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5pbmFjdGl2ZS1jb250ZW50Jykuc3R5bGUub3BhY2l0eSA9ICcwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUucXVlcnlTZWxlY3RvcignLmFjdGl2ZS1jb250ZW50JykuY2xhc3NMaXN0LmFkZCgnYWN0aXZlLWNvbnRlbnRfX2luYWN0aXZlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5pdFZlcnRpY2FsVGV4dFNsaWRlciA9ICgkZWwpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFN3aXBlcigkZWwsIHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcInZlcnRpY2FsXCIsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICBmcmVlTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgICAgICAgICBlbDogXCIuc3dpcGVyLXNjcm9sbGJhclwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgIC8vICAgICBuZXh0RWw6IGAudmVydGljYWwtdGV4dC1uZXh0YCxcclxuICAgICAgICAgICAgLy8gICAgIHByZXZFbDogYC52ZXJ0aWNhbC10ZXh0LXByZXYgYCxcclxuICAgICAgICAgICAgLy8gICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgLy8gfSxcclxuICAgICAgICAgICAgbW91c2V3aGVlbDogdHJ1ZSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc01hcmtlZCA9IGZhbHNlO1xyXG4gICAgY29uc3QgbWVudUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIGlmIChoYW1idXJnZXJNZW51LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKSAmJiB1dGlscy4kZWwoJy5oYW1idXJnZXJfX3NlY3Rpb25fX2ZpbmFsbHlfb3BlbmVkJykpIHtcclxuICAgICAgICAgICAgdXRpbHMuY2hlY2tJc0FjdGl2ZUxpbmsodXRpbHMuJGVsKCcuYWN0aXZlJykpXHJcbiAgICAgICAgICAgIGlzTWFya2VkID0gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBpc01hcmtlZCAmJiBjbGVhckludGVydmFsKG1lbnVJbnRlcnZhbClcclxuICAgIH0sIDEwMClcclxuXHJcbiAgICAvLyDQmtC70L7QvdC40YDRg9C10Lwg0YjQsNC/0LrRgywg0YfRgtC+0LHRiyDQstGL0YfQuNGB0LvQuNGC0Ywg0LTQu9C40L3RgyDQv9GD0L3QutGC0L7QsiDQvNC10L3RjiDQtNC70Y8g0LjRhSDQv9C70LDQstC90L7QuSDQsNC90LjQvNCw0YbQuNC4XHJcbiAgICBhbmltYXRpb25zUG9seWdvbi5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyYmVnaW4nLCBoYW1idXJnZXJNZW51LmNsb25lTm9kZSh0cnVlKSlcclxuICAgIGFuaW1hdGlvbnNQb2x5Z29uLnF1ZXJ5U2VsZWN0b3IoJyNoYW1idXJnZXJTZWN0aW9uJykuaWQgPSAnJ1xyXG4gICAgY29uc3QgaGVhZGVyTGlua3NDb3B5ID0gYW5pbWF0aW9uc1BvbHlnb24ucXVlcnlTZWxlY3RvckFsbCgnYScpXHJcbiAgICBoZWFkZXJMaW5rc0NvcHkuZm9yRWFjaCgoYSwgaSkgPT4ge1xyXG4gICAgICAgIGlmIChpICE9PSBoZWFkZXJMaW5rc0NvcHkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICBhLnN0eWxlLndpZHRoID0gJ2F1dG8nXHJcbiAgICAgICAgICAgIGEuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJ1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgdXRpbHMuJGVsKCcuZGVza3RvcC1saW5rcycpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKS5mb3JFYWNoKGEgPT4gYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdXRpbHMuY2hhbmdlUGFnZShlKVxyXG4gICAgfSkpXHJcblxyXG4gICAgaGFtYnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaGFtYnVyZ2VyTWVudS5jbGFzc0xpc3QuYWRkKCdoYW1idXJnZXJfX3NlY3Rpb25fX29wZW5lZCcpXHJcbiAgICAgICAgaGFtYnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LmFkZCgnaGFtYnVyZ2VyX19zZWN0aW9uX19maW5hbGx5X29wZW5lZCcpXHJcbiAgICAgICAgICAgIGhhbWJ1cmdlck1lbnUucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goKGEsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBoZWFkZXJMaW5rc0NvcHkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGEuc3R5bGUud2lkdGggPSBoZWFkZXJMaW5rc0NvcHlbaV0ub2Zmc2V0V2lkdGggKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNoYW5nZVBhZ2UoZSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuICAgIC8vINCV0YHQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvdCwINCz0LvQsNCy0L3QvtC5XHJcbiAgICBpZiAocHJpbWFyeSkge1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHV0aWxzLmlzU3RhdGUoKSkge1xyXG4gICAgICAgICAgICBpZiAodXRpbHMuaXNEZXNrdG9wKCkpIHtcclxuICAgICAgICAgICAgICAgIGluaXREZXNrdG9wSW5uZXJTbGlkZXIoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnb3JkZXInKSlcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFRleHRTbGlkZXIoJyNkZXNrdG9wVmVydGljYWxUZXh0U2xpZGVyJylcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLmhvYmJ5ZGVza3RvcC0nLCAnYXV0bycpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wcm9qZWN0c2Rlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcubWVkaWFkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgICAgIHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5ldyBTd2lwZXIoJyNpbm5lclByaW1hcnlTbGlkZXInLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcclxuICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3BlZFNsaWRlczogNCxcclxuICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCB0aGlzLnNsaWRlc1thY3RpdmVJbmRleF0uZGF0YXNldC5zd2lwZXJTbGlkZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiBOdW1iZXIoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnb3JkZXInKSksXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wcm9qZWN0cy1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieS1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wb2RjYXN0LXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIC4yNXMnXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLm9wYWNpdHkgPSAnMScsIDE0MDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXRpbHMuaW5pdFN0YXRlTGlua3MoKVxyXG4gICAgICAgICAgICB1dGlscy5jbGVhclN0YXRlKClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlTbGlkZXJTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW1hcnlTbGlkZXInKVxyXG4gICAgICAgICAgICBjb25zdCBwcmltYXJ5U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VjdGlvbicpXHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2t0b3BQcmltYXJ5V3JhcHBlciA9IHV0aWxzLiRlbCgnLnNlY3Rpb24tc2xpZGVyLWRlc2t0b3AnKVxyXG4gICAgICAgICAgICBjb25zdCBkZXNrdG9wUHJpbWFyeVNlY3Rpb25zID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uLWRlc2t0b3AnKVxyXG4gICAgICAgICAgICBjb25zdCBkZXNrdG9wUHJpbWFyeUlubmVyU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW1hcnlTd2lwZXJEZXNrdG9wJylcclxuICAgICAgICAgICAgY29uc3QgJGlubmVyU2xpZGVyRWwgPSB1dGlscy4kZWwoJy5pbm5lci1zZWN0aW9uLXNsaWRlcicpXHJcblxyXG4gICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LrQu9C40Log0L3QsCDQs9C70LDQstC90L7QuSDQsiDQvNC+0LHQuNC70YzQvdC+0Lkg0LLQtdGA0YHQuNC4XHJcbiAgICAgICAgICAgIHByaW1hcnlTZWN0aW9ucy5mb3JFYWNoKHNlY3Rpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMScpLm5leHRFbGVtZW50U2libGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghd3JhcHBlci5xdWVyeVNlbGVjdG9yKCcuaW5uZXItc2VjdGlvbi1zbGlkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmluc2VydEFkamFjZW50RWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZnRlcmJlZ2luJywgJGlubmVyU2xpZGVyRWwuY2xvbmVOb2RlKHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbm5lclNsaWRlckVsLmlubmVySFRNTCA9ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmV4cGFuZFByaW1hcnlTZWN0aW9uKHNlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2lwZXIoJyNpbm5lclByaW1hcnlTbGlkZXInLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiBcImF1dG9cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wZWRTbGlkZXM6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdvcmRlcicsIHRoaXMuc2xpZGVzW2FjdGl2ZUluZGV4XS5kYXRhc2V0LnN3aXBlclNsaWRlSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IE51bWJlcihzZWN0aW9uLmRhdGFzZXQuaW5uZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDQwMClcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgOTUwKVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieS1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTQ1MClcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLmhvYmJ5LXNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfSwgMTcwMClcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcucHJvamVjdHMtc2xpZGVyJywgMiwgMTUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wb2RjYXN0LXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB9LCAxNzAwKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQutC70LjQuiDQvdCwINCz0LvQsNCy0L3QvtC5INCyINC00LXRgdC60YLQvtC/0L3QvtC5INCy0LXRgNGB0LjQuFxyXG4gICAgICAgICAgICBkZXNrdG9wUHJpbWFyeVNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXREZXNrdG9wSW5uZXJTbGlkZXIoc2VjdGlvbi5kYXRhc2V0Lm9yZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmV4cGFuZFByaW1hcnlTZWN0aW9uT25EZXNrdG9wKHNlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNrdG9wUHJpbWFyeUlubmVyU2xpZGVyLnN0eWxlLnRvcCA9ICcwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2t0b3BQcmltYXJ5SW5uZXJTbGlkZXIuY2xhc3NMaXN0LmFkZCgnc2hvd2VkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzUwKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodXRpbHMuJGVsKCcuYmxhY2stc2xpZGVyJykpIHtcclxuICAgICAgICBuZXcgU3dpcGVyKCcuYmxhY2stc2xpZGVyJywge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNCxcclxuICAgICAgICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbENsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbGF5ID0gNjAwXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSArPSAyMDBcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuZXh0RWw6IGAuYmxhY2stc2xpZGVyLW5leHRgLFxyXG4gICAgICAgICAgICAgICAgcHJldkVsOiBgLmJsYWNrLXNsaWRlci1wcmV2YCxcclxuICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgIDk5Njoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV3cykge1xyXG4gICAgICAgIGlzTWFya2VkICYmIGNsZWFySW50ZXJ2YWwobWVudUludGVydmFsKVxyXG4gICAgICAgIGxldCBkZWxheSA9IDIwMFxyXG4gICAgICAgIG5ld3MucXVlcnlTZWxlY3RvckFsbCgnLm5ld3MtaXRlbScpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gaXRlbS5zdHlsZS5vcGFjaXR5ID0gMSwgZGVsYXkpXHJcbiAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIG5ldyBTd2lwZXIoJy5ob3Jpem9udGFsLWRlc2t0b3Atc2xpZGVyJywge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcclxuICAgICAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICA5OTY6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzYsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYC5zd2lwZXItYnV0dG9uLW5leHRgLFxyXG4gICAgICAgICAgICAgICAgcHJldkVsOiBgLnN3aXBlci1idXR0b24tcHJldmAsXHJcbiAgICAgICAgICAgICAgICBsb2NrQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXRpbHMuJGVsKCcuc2luZ2xlLXBhZ2UnKSkge1xyXG4gICAgICAgIC8vIGluaXRWZXJ0aWNhbFNsaWRlcignLnNpbmdsZXBhZ2VkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICBuZXcgU3dpcGVyKCcuc2luZ2xlcGFnZWRlc2t0b3AtJywge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDE1LFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSA1MDBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuZXh0RWw6IGAuc2luZ2xlcGFnZWRlc2t0b3AtbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAuc2luZ2xlcGFnZWRlc2t0b3AtcHJldmAsXHJcbiAgICAgICAgICAgICAgICBsb2NrQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pIl19
