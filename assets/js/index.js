document.addEventListener("DOMContentLoaded",(function(){const e={$el:e=>document.querySelector(e),setState:()=>{sessionStorage.setItem("state",JSON.stringify(e.$el(".index-main").innerHTML))},clearState:()=>{sessionStorage.removeItem("state")},initStateLinks:()=>{setTimeout(()=>{document.querySelectorAll(".state-link").forEach(t=>t.addEventListener("click",()=>{e.setState()}))},1e3)},isState:()=>!!sessionStorage.getItem("state"),isDesktop:()=>window.innerWidth>=996,expandPrimarySection:t=>{const s=e.$el(".section-slider"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),n=s.querySelector('[data-name="projects"]'),o=s.querySelector('[data-name="media"]'),a=t.querySelector(`[data-position-${t.dataset.name}="outer"]`),r=t.querySelectorAll(`[data-position-${t.dataset.name}="inner"]`);switch(e.initStateLinks(),t.style.width="100%",t.dataset.name){case"about":l.style.left="100%",n.style.right="-50%",o.style.right="-70%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-3").classList.add("slide-3__scrolled")}));break;case"hobby":i.style.left="-25%",t.style.left=0,n.style.right="-25%",o.style.right="-50%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>{e.style.display="block"})}));break;case"projects":i.style.left="-50%",l.style.left="-25%",t.style.right=0,o.style.right="-25%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-2").classList.add("slide-2__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>e.style.display="block")}));break;case"media":i.style.left="-75%",l.style.left="-50%",n.style.right="100%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.querySelector(".slide-2").addEventListener("animationend",(function(){}))}sessionStorage.setItem("order",t.dataset.order)},expandPrimarySectionOnDesktop:t=>{const s=e.$el(".section-slider-desktop"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),o=s.querySelector('[data-name="projects"]'),r=s.querySelector('[data-name="media"]');switch(a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),t.style.width="95%",sessionStorage.setItem("order",t.dataset.order),t.dataset.name){case"about":t.querySelector(".section-desktop__content").style.right="calc(100% - 413px)",i.style.left="2.5%",l.style.left="97.5%",o.style.right="-25%",r.style.right="-90%";break;case"hobby":t.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",l.style.left="2.5%",o.style.right="-10%",r.style.right="-40%";break;case"projects":t.querySelector(".section-name").style.left="0",i.style.left="-50%",l.style.left="-20%",o.style.right="2.5%",r.style.right="-30%";break;case"media":i.style.left="-60%",l.style.left="-30%",o.style.right="97.5%",r.style.right="2.5%"}e.initStateLinks()},changePage:t=>{t.preventDefault(),e.$el("main").classList.add("page-changing"),e.clearState(),setTimeout(()=>window.location.href=t.target.href,700)},checkIsActiveLink:e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")}},t=document.getElementById("animationsPolygon"),s=document.getElementById("hamburgerSection"),i=e.$el(".primary"),l=e.$el(".news"),n=(e,t=2,s=15,i=!0)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(s),preloadImages:!1,lazy:!0,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{afterInit:function(){document.querySelectorAll(".section-desktop").forEach(e=>e.style.cursor="grab")},slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),this.slides.forEach((t,s)=>{s===e?t.querySelector(".active-content").classList.remove("active-content__inactive"):t.querySelector(".active-content").classList.add("active-content__inactive")})}}})},a=e=>new Swiper(e,{direction:"vertical",slidesPerView:"auto",freeMode:!0,scrollbar:{el:".swiper-scrollbar"},navigation:{nextEl:".vertical-text-next",prevEl:".vertical-text-prev ",lockClass:"d-none"},mousewheel:!0});let r=!1;const d=setInterval(()=>{s.querySelector(".active")&&e.$el(".hamburger__section__finally_opened")&&(e.checkIsActiveLink(e.$el(".active")),r=!0),r&&clearInterval(d)},100);t.insertAdjacentElement("afterbegin",s.cloneNode(!0)),t.querySelector("#hamburgerSection").id="";const c=t.querySelectorAll("a");if(c.forEach((e,t)=>{t!==c.length-1&&(e.style.width="auto",e.style.visibility="visible")}),document.querySelectorAll(".logo__wrapper").forEach(e=>e.addEventListener("click",e=>{e.preventDefault(),sessionStorage.removeItem("test"),sessionStorage.removeItem("order"),sessionStorage.removeItem("state"),window.location.href="/"})),e.$el(".desktop-links").querySelectorAll("a").forEach(t=>t.addEventListener("click",(function(t){e.changePage(t)}))),s.addEventListener("click",(function(t){s.classList.add("hamburger__section__opened"),s.addEventListener("animationend",()=>{s.classList.add("hamburger__section__finally_opened"),s.querySelectorAll("a").forEach((t,s)=>{s!==c.length-1&&(t.style.width=c[s].offsetWidth+"px",t.addEventListener("click",(function(t){e.changePage(t)})))})})})),i)if(e.isState())e.isDesktop()?(o(sessionStorage.getItem("order")),a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),e.$el("main").style.opacity="1"):(new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("test",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(sessionStorage.getItem("test"))}),a("#mobileVerticalTextSlider"),n(".projects-slider",2,15,!1),n(".hobby-slider",2,15,!1),n(".podcast-slider",2,15,!1),e.$el("main").style.transition="all .25s",setTimeout(()=>e.$el("main").style.opacity="1",1400)),e.initStateLinks(),e.clearState();else{e.$el("main").style.opacity="1";document.getElementById("primarySlider");const t=document.querySelectorAll(".section"),s=e.$el(".section-slider-desktop").querySelectorAll(".section-desktop"),i=document.getElementById("primarySwiperDesktop"),l=e.$el(".inner-section-slider");let r=!1;t.forEach(t=>{t.addEventListener("click",(function(s){if(!r){const s=t.querySelector(".slide-1").nextElementSibling;s.querySelector(".inner-section-slider")||(s.insertAdjacentElement("afterbegin",l.cloneNode(!0)),l.innerHTML=""),e.expandPrimarySection(t),r=!0,setTimeout(()=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),sessionStorage.setItem("test",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(t.dataset.inner)})},400),setTimeout(()=>{a("#mobileVerticalTextSlider")},950),setTimeout(()=>{n(".hobby-slider",2,15,!1)},1450),setTimeout(()=>{n(".projects-slider",2,15,!1),n(".podcast-slider",2,15,!1)},1700)}}))}),s.forEach(t=>{t.addEventListener("click",(function(){o(t.dataset.order),e.expandPrimarySectionOnDesktop(t),t.addEventListener("transitionend",()=>{i.style.top="0",setTimeout(()=>{i.classList.add("showed")},350)})}))})}if(e.$el(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,preloadImages:!1,lazy:!0,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"},breakpoints:{996:{slidesPerView:2}}}),l){let e=200;l.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),window.addEventListener("load",()=>{new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},preloadImages:!1,lazy:!0,mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})})}e.$el(".single-page")&&new Swiper(".singlepagedesktop-",{direction:"vertical",loop:!0,slidesPerView:"auto",spaceBetween:15,preloadImages:!1,lazy:!0,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".singlepagedesktop-next",prevEl:".singlepagedesktop-prev",lockClass:"d-none"}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInV0aWxzIiwiJGVsIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwic2V0U3RhdGUiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJpbm5lckhUTUwiLCJjbGVhclN0YXRlIiwicmVtb3ZlSXRlbSIsImluaXRTdGF0ZUxpbmtzIiwic2V0VGltZW91dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsaW5rIiwiaXNTdGF0ZSIsImdldEl0ZW0iLCJpc0Rlc2t0b3AiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiZXhwYW5kUHJpbWFyeVNlY3Rpb24iLCJzZWN0aW9uIiwicHJpbWFyeVdyYXBwZXIiLCJhYm91dCIsImhvYmJ5IiwicHJvamVjdHMiLCJtZWRpYSIsImlubmVyTmFtZSIsImRhdGFzZXQiLCJuYW1lIiwic3R5bGUiLCJ3aWR0aCIsImxlZnQiLCJyaWdodCIsImNsYXNzTGlzdCIsImFkZCIsImZvckVhY2giLCJkaXNwbGF5Iiwib3V0ZXJOYW1lIiwib3JkZXIiLCJleHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcCIsImRlc2t0b3BQcmltYXJ5V3JhcHBlciIsImluaXRWZXJ0aWNhbFNsaWRlciIsImluaXRWZXJ0aWNhbFRleHRTbGlkZXIiLCJlIiwibG9jYXRpb24iLCJocmVmIiwidGFyZ2V0IiwiY2hlY2tJc0FjdGl2ZUxpbmsiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZ2V0RWxlbWVudEJ5SWQiLCJwcmltYXJ5Iiwic3BhY2VCZXR3ZWVuIiwiaXNOYXZpZ2F0aW9uIiwiU3dpcGVyIiwiYW5pbWF0aW9uc1BvbHlnb24iLCJoYW1idXJnZXJNZW51Iiwic2xpZGVzUGVyVmlldyIsIk51bWJlciIsInByZWxvYWRJbWFnZXMiLCJzY3JvbGxiYXIiLCJ2ZXJ0aWNhbENsYXNzIiwib24iLCJ0aGlzIiwic2xpZGVzIiwic2xpZGUiLCJuIiwib3BhY2l0eSIsImRlbGF5Iiwia2V5Ym9hcmQiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwic2xpY2UiLCJpbmRleE9mIiwicHJldkVsIiwibG9ja0NsYXNzIiwiaW5pdGlhbFNsaWRlUG9zaWl0b24iLCJsb29wIiwibG9vcGVkU2xpZGVzIiwiY2VudGVyZWRTbGlkZXMiLCJpbml0aWFsU2xpZGUiLCJpbml0RGVza3RvcElubmVyU2xpZGVyIiwiZW5hYmxlZCIsImN1cnNvciIsInNsaWRlQ2hhbmdlIiwiYWN0aXZlSW5kZXgiLCJzd2lwZXJTbGlkZUluZGV4IiwicmVtb3ZlIiwiZGlyZWN0aW9uIiwiZnJlZU1vZGUiLCJlbCIsIm1vdXNld2hlZWwiLCJzZXRJbnRlcnZhbCIsImlzTWFya2VkIiwiY2xlYXJJbnRlcnZhbCIsIm1lbnVJbnRlcnZhbCIsImNsb25lTm9kZSIsImlkIiwiaGVhZGVyTGlua3NDb3B5IiwiYSIsImkiLCJ2aXNpYmlsaXR5IiwibG9nbyIsInByZXZlbnREZWZhdWx0IiwibGVuZ3RoIiwib2Zmc2V0V2lkdGgiLCJvbmx5SW5WaWV3cG9ydCIsInRyYW5zaXRpb24iLCJkZXNrdG9wUHJpbWFyeVNlY3Rpb25zIiwicHJpbWFyeVNsaWRlclNlY3Rpb24iLCJwcmltYXJ5U2VjdGlvbnMiLCJpc1ByaW1hcnlFeHBhbmRlZCIsIm5leHRFbGVtZW50U2libGluZyIsIiRpbm5lclNsaWRlckVsIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiaW5uZXIiLCJ0b3AiLCJkZXNrdG9wUHJpbWFyeUlubmVyU2xpZGVyIiwiYWZ0ZXJJbml0IiwiYnJlYWtwb2ludHMiLCJuZXdzIiwiaXRlbSIsIjk5NiIsImxhenkiXSwibWFwcGluZ3MiOiJBQUFBQSxTQUFTQyxpQkFBaUIsb0JBQW9CLFdBQzFDLE1BQU1DLEVBQVEsQ0FDUEMsSUFBR0MsR0FBYUosU0FBU0ssY0FBY0QsR0FDMUNFLFNBQVUsS0FDTkMsZUFBZUMsUUFBUSxRQUFjQyxLQUFBQSxVQUFnQk4sRUFBSUEsSUFBQSxlQUFlTyxhQUU1RUMsV0FBWSxLQUNSSixlQUFlSyxXQUFXLFVBRTlCQyxlQUFnQixLQUVaQyxXQUFpQixLQUNjZCxTQUFDZSxpQkFBaUIsZUFDMUJDLFFBQVFBLEdBQUtmLEVBQUFBLGlCQUFMLFFBQXFDLEtBQ3RESyxFQUFOQSxlQUhSLE1BT0pXLFFBQVMsTUFBUVYsZUFBZVcsUUFBUSxTQUN4Q0MsVUFBVyxJQUFNQyxPQUFPQyxZQWxCZCxJQW1CVkMscUJBQXVCQyxJQUNiQyxNQUFBQSxFQUF1QnJCLEVBQUlBLElBQUEsbUJBQ3RCc0IsRUFBR0QsRUFBZW5CLGNBQWMsdUJBQ2hDcUIsRUFBR0YsRUFBZW5CLGNBQWMsdUJBQ3JDc0IsRUFBV0gsRUFBZW5CLGNBQWMsMEJBQ25DdUIsRUFBR0osRUFBZW5CLGNBQWMsdUJBR3JDd0IsRUFBWU4sRUFBUVIsY0FBa0Isa0JBQWlCUSxFQUFRTyxRQUFRQyxpQkFDdkVsQixFQUFOVSxFQUFBUixpQkFBQSxrQkFBQVEsRUFBQU8sUUFBQUMsaUJBRUEsT0FEQVIsRUFBUVMsaUJBQVJULEVBQVFTLE1BQU1DLE1BQVEsT0FDZFYsRUFBUU8sUUFBaEJDLE1BQ1MsSUFBTCxRQUNVQyxFQUFOQSxNQUFtQkUsS0FBbkIsT0FDU0YsRUFBTUcsTUFBUUEsTUFBdkIsT0FDTUgsRUFBTUcsTUFBUUEsTUFBcEIsT0FDUWxDLEVBQUFBLGlCQUFpQixpQkFBaUIsV0FDOUJJLEVBQUFBLGNBQTBCK0IsWUFBVUMsVUFBSUEsSUFBQSxxQkFDeENoQyxFQUFBQSxjQUEwQitCLFlBQVVDLFVBQUlBLElBQUEsd0JBRXBELE1BQ0osSUFBSyxRQUFMWixFQUFBTyxNQUFBRSxLQUFBLE9BQ1VGLEVBQU5BLE1BQW1CRSxLQUFuQixFQUNRRixFQUFSQSxNQUFBRyxNQUFBLE9BQ1NILEVBQU1HLE1BQWZBLE1BQUEsT0FDTUgsRUFBY00sUUFBcEJQLEdBQUFBLEVBQUFDLE1BQUFPLFFBQUEsUUFDVUQsRUFBUVAsaUJBQWFDLGlCQUFnQixXQUN2Qy9CLEVBQUFBLGNBQWlCLFlBQWlCbUMsVUFBWUMsSUFBQSxxQkFDMUNoQyxFQUFBQSxjQUEwQitCLGlCQUFjQSxVQUFBQyxJQUFBLDBCQUN4Q2hDLEVBQUFBLGNBQWMsWUFBaUIrQixVQUFjQyxJQUFBLHdCQUZ6RGQsRUFBQXRCLGlCQUFBLGdCQUFBLFdBS1FBLEVBQVIrQixNQUF5Qk8sUUFBekIsT0FDY1AsRUFBTU8sUUFBVVIsSUFDaEJPLEVBQVFQLE1BQVFRLFFBQUEsYUFGOUIsTUFNQSxJQUFBLFdBRUFkLEVBQU1PLE1BQU1FLEtBQU8sT0FEbEJSLEVBQUxNLE1BQUFFLEtBQUEsT0FDVUYsRUFBTkEsTUFBbUJHLE1BQW5CLEVBQ01ILEVBQU5BLE1BQW1CRyxNQUFuQixPQUNRSCxFQUFSTSxRQUFBUCxHQUFBQSxFQUFBQyxNQUFBTyxRQUFBLFFBQ01QLEVBQU4vQixpQkFBQSxpQkFBQSxXQUNVcUMsRUFBWWpDLGNBQUksWUFBcUIrQixVQUEvQ0MsSUFBQSxxQkFDUXBDLEVBQUFBLGNBQWlCLGlCQUFpQm1DLFVBQVlDLElBQUEsNkJBRTFDaEMsRUFBQUEsaUJBQWMsZ0JBQTJCZ0MsV0FGckRHLEVBQUFSLE1BQUFPLFFBQUEsT0FJUXRDLEVBQVJxQyxRQUF5QlAsR0FBekJBLEVBQXlDQyxNQUFBTyxRQUFZLFlBRWpEVixNQUZKLElBQUEsUUFJQUosRUFBQU8sTUFBQUUsS0FBQSxPQUdBUixFQUFNTSxNQUFNRSxLQUFPLE9BRnZCUCxFQUFBSyxNQUFBRyxNQUFBLE9BRVVILEVBQU4vQixpQkFBQSxpQkFBQSxXQUNBc0IsRUFBQWxCLGNBQ0EsWUFBQStCLFVBQUFDLElBQUEscUJBR0lkLEVBQVFsQixjQUFjLFlBQVkrQixVQUFVQyxJQUFJLHdCQUR4Q2hDLEVBQUFBLGNBQWMsWUFBWStCLGlCQUFjLGdCQUFoRCxlQUdKYixlQUFRbEIsUUFBYyxRQUFZSixFQUFBQSxRQUFsQ3dDLFFBcERSQyw4QkFBQW5CLElBMERBLE1BQU1vQixFQUF3QnpDLEVBQU1DLElBQUksMkJBSHhDSSxFQUFlQyxFQUF5QnNCLGNBQXhDLHVCQXJGTUosRUFBQWlCLEVBQUF0QyxjQUFBLHVCQXVGVnFDLEVBQUFBLEVBQTRDckMsY0FBQSwwQkFDbENzQyxFQUFBQSxFQUFrQ3RDLGNBQUEsdUJBT3hDdUMsT0FOTW5CLEVBQVFrQiw4QkFDUmpCLEVBQVFpQixpQkFBc0J0QyxRQUM5QnNCLEVBQVdnQixvQkFBc0J0QyxRQUNqQ3VCLEVBQVFlLGlCQUFzQnRDLFFBQ3BDd0MsRUFBQUEsTUFBQUEsTUFBdUIsTUFDdkJELGVBQW1CcEMsUUFBQSxRQUFrQmUsRUFBckNPLFFBQUFXLE9BQ0FHLEVBQW1CZCxRQUFBQyxNQUNuQmEsSUFBQUEsUUFDY1gsRUFBUTVCLGNBQXRCLDZCQUFBMkIsTUFBQUcsTUFBQSxxQkFDY1YsRUFBQ2pCLE1BQVEwQixLQUFTWCxPQUt4QkcsRUFBTU0sTUFBTUUsS0FBTyxRQUpuQlgsRUFBQVMsTUFBUkcsTUFBQSxPQUNJUCxFQUFBSSxNQUFBRyxNQUFBLE9BQ1k5QixNQUNGMkIsSUFBTixRQUNNQSxFQUFOM0IsY0FBQSw2QkFBQTJCLE1BQUFFLEtBQUEsTUFDU0YsRUFBTUcsTUFBZkQsS0FBQSxPQUNNRixFQUFNRyxNQUFRRCxLQUFwQixPQUNBUCxFQUFBSyxNQUFBRyxNQUFBLE9BTUFQLEVBQU1JLE1BQU1HLE1BQVEsT0FMeEIsTUFDSVosSUFBUWxCLFdBQ0YyQixFQUFOM0IsY0FBQSxpQkFBQTJCLE1BQUFFLEtBQUEsSUFDTUYsRUFBTkEsTUFBbUJFLEtBQW5CLE9BQ1NGLEVBQU1HLE1BQWZELEtBQUEsT0FDTUYsRUFBTkEsTUFBb0JHLE1BQXBCLE9BQ0FQLEVBQUFJLE1BQUFHLE1BQUEsT0FPQSxNQU5DLElBQUEsUUFDTzlCLEVBQUFBLE1BQWM2QixLQUFBLE9BQ2hCRixFQUFOQSxNQUFtQkUsS0FBbkIsT0FDTUYsRUFBYUEsTUFBbkJHLE1BQUEsUUFDU0gsRUFBTUcsTUFBZkEsTUFBQSxPQVVSakMsRUFBTVcsa0JBTkVZLFdBQUFxQixJQUNBcEIsRUFBQUEsaUJBQ0FDLEVBQVF4QixJQUFDNkIsUUFBVEksVUFBQUMsSUFBQSxpQkFDQVQsRUFBTUksYUFDTmxCLFdBQUEsSUFBQU0sT0FBQTJCLFNBQUFDLEtBQUFGLEVBQUFHLE9BQUFELEtBQUEsTUFVWkUsa0JBQW9CbEMsSUFSVkgsRUFBQUEsVUFBTndCLElBQUEsVUFoSU1yQixFQUFBbUMsdUJBQUFmLFVBQUFDLElBQUEsb0JBcUlObkMsRUFBQUYsU0FBQW9ELGVBQUEscUJBQ0F0QyxFQUFpQk0sU0FBTzJCLGVBQWtCRSxvQkF0SXBDSSxFQUFBbkQsRUFBQUMsSUFBQSxZQXdJVitDLEVBQUFBLEVBQW9CbEMsSUFBRCxTQUVYNEIsRUFBQ08sQ0FBQUEsRUFBdUJmLEVBQWMsRUFBQWtCLEVBQTFDLEdBQUFDLEdBQUEsSUFDSCxJQUFBQyxPQUFBckQsRUFBQSxDQUdDc0QsVUFBQUEsV0FDQUMsTUFBQUEsRUFDQUwsY0FBVU0sRUFDTkwsYUFBYU0sT0FBdkJOLEdBU1FPLGVBQWUsRUFQakJqQixNQUFBQSxFQUNLa0IsVUFBVzNELENBQ2Q0RCxjQUFBLFVBRU1DLEdBSGEsQ0FJbkJMLFVBQWVBLFdBQ0RDLElBQUFBLEVBQU9OLElBQ1JXLEtBQUVDLE9BTkk1QixRQUFBLENBQUE2QixFQUFBQyxLQUFBdEQsV0FBQSxLQVFScUQsRUFBQW5DLE1BQUFxQyxRQUFBLEtBQ1FDLEdBVEFBLEdBQUEsUUFjWEMsU0FBWWpDLENBQ1J4QixTQUFXLEVBQ1BxRCxnQkFBWUUsR0FFaEJDLFlBQUEsRUFFUEUsV0FBQSxDQXBCY0MsT0FBQXRFLEVBQUF1RSxNQUFBLEVBQUF2RSxFQUFBd0UsUUFBQSxNQUFBLFFBc0JUQyxPQUFBekUsRUFBQXVFLE1BQUEsRUFBQXZFLEVBQUF3RSxRQUFBLE1BQUEsUUFDQ0UsVUFERCxZQU1WTCxFQUFZTSxJQUNSTCxJQUFBQSxPQUFXdEUsMEJBQXlCLENBQ3BDeUUsY0FBZUYsT0FDZkcsYUFBVyxFQUhIRSxNQUFBLEVBNUJoQkMsYUFBQSxFQURKQyxnQkFBQSxFQTRDUUMsYUFBY3RCLE9BQU9rQixHQVB2QkssU0FBQUEsQ0FDU0MsU0FBQSxFQUNQekIsZ0JBRGtDLEdBRzVCSyxHQUg0QixDQUlsQ2dCLFVBSmtDLFdBS3BCaEYsU0FMb0JlLGlCQUFBLG9CQUFBdUIsUUFBQWYsR0FBQUEsRUFBQVMsTUFBQXFELE9BQUEsU0FPeEJDLFlBQUEsV0FDRyxNQURIQyxZQUVVQSxHQVRjdEIsS0FXOUIxRCxlQUFBQyxRQUFBLFFBQUF5RCxLQUFBQyxPQUFBcUIsR0FBQXpELFFBQUEwRCxrQkFDV3ZCLEtBQUFDLE9BQVk1QixRQUFBLENBQUE2QixFQUFBQyxLQUNWckQsSUFBQUEsRUFGYm9ELEVBQUE5RCxjQUFBLG1CQUFBK0IsVUFBQXFELE9BQUEsNEJBTVFGLEVBQUFBLGNBQUFBLG1CQUFBQSxVQUFBQSxJQUFBQSxtQ0FTQzFDLEVBQUExQyxHQU5MLElBQUFxRCxPQUFBckQsRUFBQSxDQVFIdUYsVUFBQSxXQWpCRC9CLGNBQUEsT0FYUmdDLFVBQUEsRUFESjdCLFVBQUEsQ0F3Q1k4QixHQUFJLHFCQUxMcEIsV0FBV3JFLENBQ0xzRSxPQUFFLHNCQUNYZCxPQUFlLHVCQUNMa0IsVUFIUyxVQUtYZ0IsWUFBQSxJQUlKakIsSUFBQUEsR0FBUyxFQUNUQyxNQUFBQSxFQUFXaUIsWUFBQSxLQVZJcEMsRUFBQXJELGNBQUEsWUFBQUgsRUFBQUMsSUFBQSx5Q0FZbkIwRixFQUFZM0Msa0JBQUFoRCxFQUFBQyxJQUFBLFlBWmhCNEYsR0FBQSxHQXNCQUEsR0FBWUMsY0FBY0MsSUFOMUJGLEtBR0k3RixFQUFNZ0Qsc0JBQTRCLGFBQWxDUSxFQUFBd0MsV0FBQSxJQUNBSCxFQUFBMUYsY0FBQSxxQkFBQThGLEdBQUEsR0FDSCxNQUFBQyxFQUFBM0MsRUFBQTFDLGlCQUFBLEtBdUNBLEdBL0JMcUYsRUFBZ0I5RCxRQUFRLENBQUMrRCxFQUFHQyxLQVBoQkEsSUFBSU4sRUFBY0MsT0FBMUIsSUFHSkksRUFBQXJFLE1BQUFDLE1BQUEsT0FPUW9FLEVBQUVyRSxNQUFNdUUsV0FBYSxhQUg3QkgsU0FBQUEsaUJBQTRCRSxrQkFBTWhFLFFBQUFrRSxHQUFBQSxFQUFBdkcsaUJBQUEsUUFBQTZDLElBQzFCd0QsRUFBQ0csaUJBQ0N6RSxlQUFjcEIsV0FBaEIsUUFDRW9CLGVBQU11RSxXQUFhLFNBQ3hCaEcsZUFBQUssV0FBQSxTQUpMUSxPQUFBMkIsU0FBQUMsS0FBQSxPQVNJekMsRUFBQUEsSUFBQUEsa0JBQTBCUSxpQkFBMUIsS0FBQXVCLFFBQUErRCxHQUFBQSxFQUFBcEcsaUJBQUEsU0FBQSxTQUFBNkMsR0FDQXZDLEVBQUFBLFdBQWVLLE9BSG5COEMsRUFBQXpELGlCQUFBLFNBQUEsU0FBQTZDLEdBUU0zQyxFQUFJaUMsVUFBa0JyQixJQUFBQSw4QkFDeEJiLEVBQUFELGlCQUFBLGVBQUEsS0FESnlELEVBQUF0QixVQUFBQyxJQUFBLHNDQUlBcUIsRUFBY3pELGlCQUEwQixLQUFBcUMsUUFBYSxDQUFBK0QsRUFBQUMsS0FDbkNsRSxJQUFBQSxFQUFjc0UsT0FBQSxJQUNkekcsRUFBQUEsTUFBQUEsTUFBaUJtRyxFQUFnQkUsR0FBQUssWUFBTSxLQUNuQ3ZFLEVBQUFBLGlCQUFjLFNBQUEsU0FBQVUsR0FDZC9CLEVBQUFBLFdBQWQrQixjQUZKTyxFQWFKLEdBQUFuRCxFQUFBZSxVQUdZZixFQUFNaUIsYUFGTGdFLEVBQUE1RSxlQUFBVyxRQUFBLFVBQ0NELEVBQVcsOEJBQ1BFLEVBQWEsaUJBQUEsUUFDbkJnRSxFQUF1QjVFLG9CQUF1QixRQUM5Q3NDLEVBQXVCLGlCQUFBLFFBQ3ZCRCxFQUFBQSxJQUFrQixRQUFDWixNQUFBcUMsUUFBa0IsTUFFckN6QixJQUFBQSxPQUFtQixzQkFBa0IsQ0FDM0JlLGNBQWNVLE9BQ3JCWSxnQkFBQSxFQUNRM0IsYUFBQSxFQUNQSyxNQUFlLEVBQ2ZzQixhQUY4QixFQUc5QjNCLGdCQUg4QixFQUFBaUIsU0FBQSxDQUtoQmEsU0FMZ0IsRUFNaEJ3QixnQkFOZ0IsR0FRbkI1QyxHQUFFLENBQ1Q0QyxZQUFnQixXQVRVLE1BQUFyQixZQVcxQkEsR0FDYXRCLEtBQ0gxRCxlQUFBQyxRQUFBLE9BQUF5RCxLQUFBQyxPQUFBcUIsR0FBQXpELFFBQUEwRCxvQkFHTmpGLGFBQWVDLE9BQVFELGVBQVFXLFFBQVlxRSxXQWhCckIxQyxFQUFBLDZCQW1COUJxQyxFQUFxQjNFLG1CQUF1QixFQUFBLElBQXhCLEdBbkJ4QnFDLEVBQUEsZ0JBQUEsRUFBQSxJQUFBLEdBcUJBQyxFQUF1QixrQkFBQSxFQUFBLElBQXZCLEdBQ0FELEVBQUFBLElBQWtCLFFBQUNaLE1BQUE2RSxXQUFELFdBQ2xCakUsV0FBbUIsSUFBQTFDLEVBQUFDLElBQUQsUUFBeUI2QixNQUEzQ3FDLFFBQUEsSUFBQSxPQUVBbkUsRUFBVVcsaUJBQ1ZDLEVBQVVILGlCQUNiLENBSURULEVBQU1DLElBQUksUUFBUTZCLE1BQU1xQyxRQUFVLElBSGxDckUsU0FBQW9ELGVBQUEsaUJBQU12QyxNQUNBRixFQUFOWCxTQUFBZSxpQkFBQSxZQUVVK0YsRUFEUDVHLEVBQUFDLElBQUEsMkJBQ0hZLGlCQUFBLG9CQUNNZ0csRUFBZ0MzRCxTQUFBQSxlQUFlLHdCQUMvQzRELEVBQWtCaEgsRUFBU2UsSUFBQUEseUJBRTNCK0YsSUFBQUEsR0FBc0IsRUFJeEJHLEVBQWlCM0UsUUFUbEJmLElBYUNBLEVBQVF0QixpQkFBaUIsU0FBUyxTQUFVNkMsR0FEaERrRSxJQUFnQjFFLEVBQW1CLENBQ3ZCckMsTUFBQUEsRUFBUnNCLEVBQWtDbEIsY0FBYSxZQUFBNkcsbUJBQ3RDRCxFQUFtQjVHLGNBQUEsMkJBQ0prQixFQUFRbEIsc0JBR2hCLGFBQWM4RyxFQUFlakIsV0FBVSxJQURuQ2tCLEVBQVIxRyxVQUNJLElBR1BSLEVBQUFvQixxQkFBQUMsR0FFRDBGLEdBQW9CLEVBRGQzRixXQUFBQSxLQUNOMkYsSUFBb0J6RCxPQUFwQixzQkFBQSxDQUNpQkcsY0FBQSxPQUNGc0IsZ0JBQXVCLEVBQ2YzQixhQURlLEVBRWR5QixNQUZjLEVBQUFDLGFBQUEsRUFBQUMsZ0JBQUEsRUFBQVYsU0FBQSxDQU1kYSxTQU5jLEVBT3BCd0IsZ0JBQUEsR0FFUTVDLEdBQUUsQ0FUVXNCLFlBQUEsV0FXMUIsTUFBQUMsWUFDeUJBLEdBQ2Z0QixLQUNGc0IsZUFBQUEsUUFBQUEsUUFBQUEsS0FBQUEsT0FBQUEsR0FBQUEsUUFBQUEsa0JBREpoRixlQUFBQyxRQUFBLE9BQUF5RCxLQUFBQyxPQUFBcUIsR0FBQXpELFFBQUEwRCxvQkFLSE4sYUFBQXRCLE9BQUFyQyxFQUFBTyxRQUFBdUYsVUFFTG5DLEtBcEJKcEUsV0FBQSxLQURKK0IsRUFBQSw4QkF3QlcsS0FDUEEsV0FBQUEsS0FESkQsRUFBQSxnQkFBQSxFQUFBLElBQUEsSUFHVyxNQU1YOUIsV0FBQSxLQUVJOEIsRUFBbUIsbUJBQW9CLEVBQUcsSUFBSSxHQUR2Q0EsRUFBTSxrQkFBQSxFQUFBLElBQUEsSUFDYkEsWUFRaEJrRSxFQUF1QnhFLFFBQVFmLElBQS9CdUYsRUFBQUEsaUJBQStCdkYsU0FBVyxXQUM5QnRCLEVBQTBCc0IsRUFBQU8sUUFBWVcsT0FDMUMwQyxFQUFBQSw4QkFBQTVELEdBQ01tQixFQUFBQSxpQkFBTixnQkFBQSxLQUNRekMsRUFBUitCLE1BQTBDc0YsSUFBTSxJQUM1Q0MsV0FBQUEsS0FDV0EsRUFBTW5GLFVBQUFDLElBQUEsV0FDYmtGLFlBaUR4QixHQXpDSXJILEVBQU1DLElBQUksa0JBQVZELElBQU1DLE9BQUksZ0JBQWtCLENBRXhCdUYsVUFBQSxXQUNBQSxNQUFXLEVBQ0wvQixjQUhrQixFQUl4QkEsYUFKd0IsR0FLeEJMLGVBTHdCLEVBTXhCTyxNQUFBQSxFQUNNQyxVQVBrQixDQVFmQyxjQUFFLFVBUmFDLEdBQUEsQ0FXcEJ3RCxVQUFBLFdBQ1csSUFBQWxELEVBQVksSUFDVkwsS0FBVEMsT0FBQTVCLFFBQUEsQ0FBQTZCLEVBQUFDLEtBQ1k5QixXQUFTNkIsS0FDTkEsRUFBTW5DLE1BQUFxQyxRQUFBLEtBQ0RBLEdBRGhCQyxHQUFBLFFBZllDLFNBQUEsQ0FzQmRhLFNBQUEsRUFDQ3dCLGdCQURELEdBdEJjZixZQUFBLEVBMEJ4QkEsV0ExQndCLENBMkJkcEIsT0FBRSxxQkFDQ0csT0FBQSxxQkFDQUMsVUFBQSxVQTdCVzRDLFlBQUEsQ0FnQ3hCQSxJQUFhLENBQ0o5RCxjQUFBLE1BT2IrRCxFQUFNLENBQU5BLElBQU1wRCxFQUFBLElBQ0ZBLEVBQUt2RCxpQkFBVCxjQUFBdUIsUUFBQXFGLElBQ0s1RyxXQUFBQSxJQUFpQjRHLEVBQUEzRixNQUFjTSxRQUFRcUYsRUFBSXJELEdBQzVDeEQsR0FBVyxNQUlmTSxPQUFPbkIsaUJBQWlCLE9BQVEsS0FDeEJ1RCxJQUFKQSxPQUFXLDZCQUE4QixDQUNyQ2tDLFVBQVcsV0FDWC9CLGNBRnFDLE9BR3JDTCxhQUhxQyxHQUkvQnlCLE1BSitCLEVBS3JDMEMsWUFBYSxDQUNKRyxJQUFBLENBQ0RqRSxjQURDLEVBRVUrQixVQUZWLGFBR1dwQyxhQUFFLEtBR2RpQixTQUFFLENBQ0dhLFNBREgsRUFFTndCLGdCQUFnQixHQUVwQi9DLGVBaEJxQyxFQWlCL0JnRSxNQWpCK0IsRUFrQnJDaEMsWUFsQnFDLEVBbUJyQ3JCLFdBQVksQ0FDQ0MsT0FBQSxzQkFDQUcsT0FBQSxzQkFDQUMsVUFBRSxjQU12QjNFLEVBQU1DLElBQUksaUJBRU5xRCxJQUFBQSxPQUFPLHNCQUF1QixDQUU5QmtDLFVBQVcsV0FDTFgsTUFId0IsRUFJOUJwQixjQUo4QixPQUs5QkwsYUFMOEIsR0FNOUJPLGVBTjhCLEVBT3hCZ0UsTUFQd0IsRUFROUIvRCxVQUFXLENBQ1BDLGNBQWUsVUFFZkMsR0FBQSxDQUNBd0QsVUFBVyxXQUNFLElBQUdsRCxFQUFaLElBQ0tKLEtBQU81QixPQUFTNkIsUUFBRCxDQUFBQSxFQUFjQyxLQUNuQnRELFdBQU0sS0FDRHVELEVBQVpyQyxNQUFBcUMsUUFBQSxLQURKQyxHQUdBQSxHQUFBLFFBSVpDLFNBQVUsQ0FDQ2EsU0FERCxFQUVOd0IsZ0JBQWdCLEdBRXBCZixZQTFCOEIsRUE0QjlCckIsV0FBWSxDQUNDQyxPQUFBLDBCQUNBRyxPQUFBLDBCQUNUQyxVQUFXIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IHV0aWxzID0ge1xyXG4gICAgICAgICRlbDogKHNlbGVjdG9yKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcclxuICAgICAgICBzZXRTdGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdzdGF0ZScsIEpTT04uc3RyaW5naWZ5KHV0aWxzLiRlbCgnLmluZGV4LW1haW4nKS5pbm5lckhUTUwpKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xlYXJTdGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKCdzdGF0ZScpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0U3RhdGVMaW5rczogKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDQodGB0YvQu9C60LgsINC/0YDQuCDQutC70LjQutC1INC90LAg0LrQvtGC0L7RgNGL0YUg0YHQvtGF0YDQsNC90Y/QtdGC0YHRjyDRgdC+0YHRgtC+0Y/QvdC40LUg0YTRgNC+0L3RgtCwINC90LAg0LPQu9Cw0LLQvdC+0Lkg0YHRgtGA0LDQvdC40YbQtVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlTGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RhdGUtbGluaycpXHJcbiAgICAgICAgICAgICAgICBzdGF0ZUxpbmtzLmZvckVhY2gobGluayA9PiBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnNldFN0YXRlKClcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9LCAxMDAwKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTdGF0ZTogKCkgPT4gISFzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdzdGF0ZScpLFxyXG4gICAgICAgIGlzRGVza3RvcDogKCkgPT4gd2luZG93LmlubmVyV2lkdGggPj0gOTk2LFxyXG4gICAgICAgIGV4cGFuZFByaW1hcnlTZWN0aW9uOiAoc2VjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcmltYXJ5V3JhcHBlciA9IHV0aWxzLiRlbCgnLnNlY3Rpb24tc2xpZGVyJylcclxuICAgICAgICAgICAgY29uc3QgYWJvdXQgPSBwcmltYXJ5V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYW1lPVwiYWJvdXRcIl0nKVxyXG4gICAgICAgICAgICBjb25zdCBob2JieSA9IHByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJob2JieVwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RzID0gcHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cInByb2plY3RzXCJdJylcclxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBwcmltYXJ5V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYW1lPVwibWVkaWFcIl0nKVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3V0ZXJOYW1lID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wb3NpdGlvbi0ke3NlY3Rpb24uZGF0YXNldC5uYW1lfT1cIm91dGVyXCJdYClcclxuICAgICAgICAgICAgY29uc3QgaW5uZXJOYW1lID0gc2VjdGlvbi5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS1wb3NpdGlvbi0ke3NlY3Rpb24uZGF0YXNldC5uYW1lfT1cImlubmVyXCJdYClcclxuICAgICAgICAgICAgdXRpbHMuaW5pdFN0YXRlTGlua3MoKVxyXG4gICAgICAgICAgICBzZWN0aW9uLnN0eWxlLndpZHRoID0gJzEwMCUnXHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2VjdGlvbi5kYXRhc2V0Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Fib3V0JzpcclxuICAgICAgICAgICAgICAgICAgICBob2JieS5zdHlsZS5sZWZ0ID0gJzEwMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnLTUwJSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctNzAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMScpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTFfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMycpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTNfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaG9iYnknOlxyXG4gICAgICAgICAgICAgICAgICAgIGFib3V0LnN0eWxlLmxlZnQgPSAnLTI1JSdcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnN0eWxlLmxlZnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy0yNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTUwJSdcclxuICAgICAgICAgICAgICAgICAgICBpbm5lck5hbWUuZm9yRWFjaChuYW1lID0+IG5hbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJylcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTEnKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0xX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tbmFtZScpLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tbmFtZV9fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0yJykuY2xhc3NMaXN0LmFkZCgnc2xpZGUtMl9fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGVyTmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyTmFtZS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwcm9qZWN0cyc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTI1JSc7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5yaWdodCA9IDBcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctMjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGlubmVyTmFtZS5mb3JFYWNoKG5hbWUgPT4gbmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMicpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTJfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1uYW1lJykuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi1uYW1lX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZXJOYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJOYW1lLmZvckVhY2gobmFtZSA9PiBuYW1lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNzUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTUwJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICAvLyBtZWRpYS5zdHlsZS5yaWdodCA9ICctMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTEnKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0xX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTInKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0yX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0yJykuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge30pXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCBzZWN0aW9uLmRhdGFzZXQub3JkZXIpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcDogKHNlY3Rpb24pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGVza3RvcFByaW1hcnlXcmFwcGVyID0gdXRpbHMuJGVsKCcuc2VjdGlvbi1zbGlkZXItZGVza3RvcCcpXHJcbiAgICAgICAgICAgIGNvbnN0IGFib3V0ID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJhYm91dFwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IGhvYmJ5ID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJob2JieVwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RzID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJwcm9qZWN0c1wiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJtZWRpYVwiXScpXHJcbiAgICAgICAgICAgIGluaXRWZXJ0aWNhbFRleHRTbGlkZXIoJyNkZXNrdG9wVmVydGljYWxUZXh0U2xpZGVyJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcuaG9iYnlkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcucHJvamVjdHNkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcubWVkaWFkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS53aWR0aCA9ICc5NSUnXHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ29yZGVyJywgc2VjdGlvbi5kYXRhc2V0Lm9yZGVyKVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHNlY3Rpb24uZGF0YXNldC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhYm91dCc6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2VjdGlvbi1kZXNrdG9wX19jb250ZW50Jykuc3R5bGUucmlnaHQgPSAnY2FsYygxMDAlIC0gNDEzcHgpJ1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3V0LnN0eWxlLmxlZnQgPSAnMi41JSdcclxuICAgICAgICAgICAgICAgICAgICBob2JieS5zdHlsZS5sZWZ0ID0gJzk3LjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy0yNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTkwJSdcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hvYmJ5JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLWRlc2t0b3BfX2NvbnRlbnQnKS5zdHlsZS5sZWZ0ID0gJzBweCdcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy0zMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy0xMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTQwJSdcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2plY3RzJzpcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLW5hbWUnKS5zdHlsZS5sZWZ0ID0gJzAnXHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTIwJSdcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy0zMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZWRpYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICctNjAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnLTMwJSdcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICc5Ny41JSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHV0aWxzLmluaXRTdGF0ZUxpbmtzKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNoYW5nZVBhZ2U6IChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5jbGFzc0xpc3QuYWRkKCdwYWdlLWNoYW5naW5nJylcclxuICAgICAgICAgICAgdXRpbHMuY2xlYXJTdGF0ZSgpXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gd2luZG93LmxvY2F0aW9uLmhyZWYgPSBlLnRhcmdldC5ocmVmLCA3MDApXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGVja0lzQWN0aXZlTGluazogKGxpbmspID0+IHtcclxuICAgICAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxyXG4gICAgICAgICAgICBsaW5rLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnYWN0aXZlLWRpdmlkZXInKVxyXG4gICAgICAgIH0sXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYW5pbWF0aW9uc1BvbHlnb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW5pbWF0aW9uc1BvbHlnb24nKVxyXG4gICAgY29uc3QgaGFtYnVyZ2VyTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoYW1idXJnZXJTZWN0aW9uJylcclxuICAgIGNvbnN0IHByaW1hcnkgPSB1dGlscy4kZWwoJy5wcmltYXJ5JylcclxuICAgIGNvbnN0IG5ld3MgPSB1dGlscy4kZWwoJy5uZXdzJylcclxuXHJcbiAgICBjb25zdCBpbml0VmVydGljYWxTbGlkZXIgPSAoJGVsLCBzbGlkZXNQZXJWaWV3ID0gMiwgc3BhY2VCZXR3ZWVuID0gMTUsIGlzTmF2aWdhdGlvbiA9IHRydWUpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFN3aXBlcigkZWwsIHtcclxuICAgICAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IHNsaWRlc1BlclZpZXcsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogTnVtYmVyKHNwYWNlQmV0d2VlbiksXHJcbiAgICAgICAgICAgIHByZWxvYWRJbWFnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBsYXp5OiB0cnVlLFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSA1MDBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIE5hdmlnYXRpb24gYXJyb3dzXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYCR7JGVsLnNsaWNlKDAsICRlbC5pbmRleE9mKCctJykpfS1uZXh0YCxcclxuICAgICAgICAgICAgICAgIHByZXZFbDogYCR7JGVsLnNsaWNlKDAsICRlbC5pbmRleE9mKCctJykpfS1wcmV2YCxcclxuICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbml0RGVza3RvcElubmVyU2xpZGVyID0gKGluaXRpYWxTbGlkZVBvc2lpdG9uKSA9PiB7XHJcbiAgICAgICAgbmV3IFN3aXBlcignLnByaW1hcnktc3dpcGVyLWRlc2t0b3AnLCB7XHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIGxvb3BlZFNsaWRlczogNCxcclxuICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IHRydWUsXHJcbiAgICAgICAgICAgIGluaXRpYWxTbGlkZTogTnVtYmVyKGluaXRpYWxTbGlkZVBvc2lpdG9uKSxcclxuICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uLWRlc2t0b3AnKS5mb3JFYWNoKHNlY3Rpb24gPT4gc2VjdGlvbi5zdHlsZS5jdXJzb3IgPSAnZ3JhYicpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXNcclxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdvcmRlcicsIHRoaXMuc2xpZGVzW2FjdGl2ZUluZGV4XS5kYXRhc2V0LnN3aXBlclNsaWRlSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IGFjdGl2ZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlLWNvbnRlbnQnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUtY29udGVudF9faW5hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2xpZGUucXVlcnlTZWxlY3RvcignLmluYWN0aXZlLWNvbnRlbnQnKS5zdHlsZS5vcGFjaXR5ID0gJzAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlLWNvbnRlbnQnKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUtY29udGVudF9faW5hY3RpdmUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbml0VmVydGljYWxUZXh0U2xpZGVyID0gKCRlbCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3dpcGVyKCRlbCwge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwidmVydGljYWxcIixcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgIGZyZWVNb2RlOiB0cnVlLFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIGVsOiBcIi5zd2lwZXItc2Nyb2xsYmFyXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYC52ZXJ0aWNhbC10ZXh0LW5leHRgLFxyXG4gICAgICAgICAgICAgICAgcHJldkVsOiBgLnZlcnRpY2FsLXRleHQtcHJldiBgLFxyXG4gICAgICAgICAgICAgICAgbG9ja0NsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlzTWFya2VkID0gZmFsc2U7XHJcbiAgICBjb25zdCBtZW51SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGhhbWJ1cmdlck1lbnUucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpICYmIHV0aWxzLiRlbCgnLmhhbWJ1cmdlcl9fc2VjdGlvbl9fZmluYWxseV9vcGVuZWQnKSkge1xyXG4gICAgICAgICAgICB1dGlscy5jaGVja0lzQWN0aXZlTGluayh1dGlscy4kZWwoJy5hY3RpdmUnKSlcclxuICAgICAgICAgICAgaXNNYXJrZWQgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlzTWFya2VkICYmIGNsZWFySW50ZXJ2YWwobWVudUludGVydmFsKVxyXG4gICAgfSwgMTAwKVxyXG5cclxuICAgIC8vINCa0LvQvtC90LjRgNGD0LXQvCDRiNCw0L/QutGDLCDRh9GC0L7QsdGLINCy0YvRh9C40YHQu9C40YLRjCDQtNC70LjQvdGDINC/0YPQvdC60YLQvtCyINC80LXQvdGOINC00LvRjyDQuNGFINC/0LvQsNCy0L3QvtC5INCw0L3QuNC80LDRhtC40LhcclxuICAgIGFuaW1hdGlvbnNQb2x5Z29uLmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIGhhbWJ1cmdlck1lbnUuY2xvbmVOb2RlKHRydWUpKVxyXG4gICAgYW5pbWF0aW9uc1BvbHlnb24ucXVlcnlTZWxlY3RvcignI2hhbWJ1cmdlclNlY3Rpb24nKS5pZCA9ICcnXHJcbiAgICBjb25zdCBoZWFkZXJMaW5rc0NvcHkgPSBhbmltYXRpb25zUG9seWdvbi5xdWVyeVNlbGVjdG9yQWxsKCdhJylcclxuICAgIGhlYWRlckxpbmtzQ29weS5mb3JFYWNoKChhLCBpKSA9PiB7XHJcbiAgICAgICAgaWYgKGkgIT09IGhlYWRlckxpbmtzQ29weS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGEuc3R5bGUud2lkdGggPSAnYXV0bydcclxuICAgICAgICAgICAgYS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9nb19fd3JhcHBlcicpLmZvckVhY2gobG9nbyA9PiBsb2dvLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgndGVzdCcpXHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgnb3JkZXInKVxyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ3N0YXRlJylcclxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvJ1xyXG4gICAgfSkpXHJcblxyXG4gICAgdXRpbHMuJGVsKCcuZGVza3RvcC1saW5rcycpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKS5mb3JFYWNoKGEgPT4gYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdXRpbHMuY2hhbmdlUGFnZShlKVxyXG4gICAgfSkpXHJcblxyXG4gICAgaGFtYnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaGFtYnVyZ2VyTWVudS5jbGFzc0xpc3QuYWRkKCdoYW1idXJnZXJfX3NlY3Rpb25fX29wZW5lZCcpXHJcbiAgICAgICAgaGFtYnVyZ2VyTWVudS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LmFkZCgnaGFtYnVyZ2VyX19zZWN0aW9uX19maW5hbGx5X29wZW5lZCcpXHJcbiAgICAgICAgICAgIGhhbWJ1cmdlck1lbnUucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goKGEsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBoZWFkZXJMaW5rc0NvcHkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGEuc3R5bGUud2lkdGggPSBoZWFkZXJMaW5rc0NvcHlbaV0ub2Zmc2V0V2lkdGggKyAncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNoYW5nZVBhZ2UoZSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG5cclxuICAgIC8vINCV0YHQu9C4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQvdCwINCz0LvQsNCy0L3QvtC5XHJcbiAgICBpZiAocHJpbWFyeSkge1xyXG4gICAgICAgIGlmICh1dGlscy5pc1N0YXRlKCkpIHtcclxuICAgICAgICAgICAgaWYgKHV0aWxzLmlzRGVza3RvcCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0RGVza3RvcElubmVyU2xpZGVyKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ29yZGVyJykpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxUZXh0U2xpZGVyKCcjZGVza3RvcFZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieWRlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcucHJvamVjdHNkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLm1lZGlhZGVza3RvcC0nLCAnYXV0bycpXHJcbiAgICAgICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgU3dpcGVyKCcjaW5uZXJQcmltYXJ5U2xpZGVyJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsb29wZWRTbGlkZXM6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rlc3QnLCB0aGlzLnNsaWRlc1thY3RpdmVJbmRleF0uZGF0YXNldC5zd2lwZXJTbGlkZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiBOdW1iZXIoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndGVzdCcpKSxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxUZXh0U2xpZGVyKCcjbW9iaWxlVmVydGljYWxUZXh0U2xpZGVyJylcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLnByb2plY3RzLXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLmhvYmJ5LXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLnBvZGNhc3Qtc2xpZGVyJywgMiwgMTUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgdXRpbHMuJGVsKCdtYWluJykuc3R5bGUudHJhbnNpdGlvbiA9ICdhbGwgLjI1cydcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdXRpbHMuJGVsKCdtYWluJykuc3R5bGUub3BhY2l0eSA9ICcxJywgMTQwMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1dGlscy5pbml0U3RhdGVMaW5rcygpXHJcbiAgICAgICAgICAgIHV0aWxzLmNsZWFyU3RhdGUoKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgY29uc3QgcHJpbWFyeVNsaWRlclNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpbWFyeVNsaWRlcicpXHJcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlTZWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uJylcclxuICAgICAgICAgICAgY29uc3QgZGVza3RvcFByaW1hcnlXcmFwcGVyID0gdXRpbHMuJGVsKCcuc2VjdGlvbi1zbGlkZXItZGVza3RvcCcpXHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2t0b3BQcmltYXJ5U2VjdGlvbnMgPSBkZXNrdG9wUHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvckFsbCgnLnNlY3Rpb24tZGVza3RvcCcpXHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2t0b3BQcmltYXJ5SW5uZXJTbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpbWFyeVN3aXBlckRlc2t0b3AnKVxyXG4gICAgICAgICAgICBjb25zdCAkaW5uZXJTbGlkZXJFbCA9IHV0aWxzLiRlbCgnLmlubmVyLXNlY3Rpb24tc2xpZGVyJylcclxuXHJcbiAgICAgICAgICAgIGxldCBpc1ByaW1hcnlFeHBhbmRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC60LvQuNC6INC90LAg0LPQu9Cw0LLQvdC+0Lkg0LIg0LzQvtCx0LjQu9GM0L3QvtC5INCy0LXRgNGB0LjQuFxyXG4gICAgICAgICAgICBwcmltYXJ5U2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQcmltYXJ5RXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTEnKS5uZXh0RWxlbWVudFNpYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5pbm5lci1zZWN0aW9uLXNsaWRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmluc2VydEFkamFjZW50RWxlbWVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWZ0ZXJiZWdpbicsICRpbm5lclNsaWRlckVsLmNsb25lTm9kZSh0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbm5lclNsaWRlckVsLmlubmVySFRNTCA9ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZXhwYW5kUHJpbWFyeVNlY3Rpb24oc2VjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNQcmltYXJ5RXhwYW5kZWQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN3aXBlcignI2lubmVyUHJpbWFyeVNsaWRlcicsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiBcImF1dG9cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcGVkU2xpZGVzOiA0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlSW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPSB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdvcmRlcicsIHRoaXMuc2xpZGVzW2FjdGl2ZUluZGV4XS5kYXRhc2V0LnN3aXBlclNsaWRlSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0ZXN0JywgdGhpcy5zbGlkZXNbYWN0aXZlSW5kZXhdLmRhdGFzZXQuc3dpcGVyU2xpZGVJbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogTnVtYmVyKHNlY3Rpb24uZGF0YXNldC5pbm5lciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA0MDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDk1MClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieS1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDE0NTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieS1zbGlkZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9LCAxNzAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLnByb2plY3RzLXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLnBvZGNhc3Qtc2xpZGVyJywgMiwgMTUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxNzAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAvLyDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LrQu9C40Log0L3QsCDQs9C70LDQstC90L7QuSDQsiDQtNC10YHQutGC0L7Qv9C90L7QuSDQstC10YDRgdC40LhcclxuICAgICAgICAgICAgZGVza3RvcFByaW1hcnlTZWN0aW9ucy5mb3JFYWNoKHNlY3Rpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbml0RGVza3RvcElubmVyU2xpZGVyKHNlY3Rpb24uZGF0YXNldC5vcmRlcilcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5leHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcChzZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVza3RvcFByaW1hcnlJbm5lclNsaWRlci5zdHlsZS50b3AgPSAnMCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNrdG9wUHJpbWFyeUlubmVyU2xpZGVyLmNsYXNzTGlzdC5hZGQoJ3Nob3dlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDM1MClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHV0aWxzLiRlbCgnLmJsYWNrLXNsaWRlcicpKSB7XHJcbiAgICAgICAgbmV3IFN3aXBlcignLmJsYWNrLXNsaWRlcicsIHtcclxuICAgICAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjQsXHJcbiAgICAgICAgICAgIHByZWxvYWRJbWFnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBsYXp5OiB0cnVlLFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSA2MDBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYC5ibGFjay1zbGlkZXItbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAuYmxhY2stc2xpZGVyLXByZXZgLFxyXG4gICAgICAgICAgICAgICAgbG9ja0NsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgOTk2OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXdzKSB7XHJcbiAgICAgICAgbGV0IGRlbGF5ID0gMjAwXHJcbiAgICAgICAgbmV3cy5xdWVyeVNlbGVjdG9yQWxsKCcubmV3cy1pdGVtJykuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBpdGVtLnN0eWxlLm9wYWNpdHkgPSAxLCBkZWxheSlcclxuICAgICAgICAgICAgZGVsYXkgKz0gMjAwXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBTd2lwZXIoJy5ob3Jpem9udGFsLWRlc2t0b3Atc2xpZGVyJywge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcclxuICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICA5OTY6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzYsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwcmVsb2FkSW1hZ2VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRFbDogYC5zd2lwZXItYnV0dG9uLW5leHRgLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZFbDogYC5zd2lwZXItYnV0dG9uLXByZXZgLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXRpbHMuJGVsKCcuc2luZ2xlLXBhZ2UnKSkge1xyXG4gICAgICAgIC8vIGluaXRWZXJ0aWNhbFNsaWRlcignLnNpbmdsZXBhZ2VkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICBuZXcgU3dpcGVyKCcuc2luZ2xlcGFnZWRlc2t0b3AtJywge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDE1LFxyXG4gICAgICAgICAgICBwcmVsb2FkSW1hZ2VzOiBmYWxzZSxcclxuICAgICAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbENsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbGF5ID0gNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSArPSAyMDBcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbW91c2V3aGVlbDogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgbmV4dEVsOiBgLnNpbmdsZXBhZ2VkZXNrdG9wLW5leHRgLFxyXG4gICAgICAgICAgICAgICAgcHJldkVsOiBgLnNpbmdsZXBhZ2VkZXNrdG9wLXByZXZgLFxyXG4gICAgICAgICAgICAgICAgbG9ja0NsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59KSJdfQ==
