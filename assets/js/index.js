document.addEventListener("DOMContentLoaded",(function(){const e={$el:e=>document.querySelector(e),setState:()=>{sessionStorage.setItem("state",JSON.stringify(e.$el(".index-main").innerHTML))},clearState:()=>{sessionStorage.removeItem("state")},initStateLinks:()=>{setTimeout(()=>{document.querySelectorAll(".state-link").forEach(t=>t.addEventListener("click",()=>{e.setState()}))},1e3)},isState:()=>!!sessionStorage.getItem("state"),isDesktop:()=>window.innerWidth>=996,expandPrimarySection:t=>{const s=e.$el(".section-slider"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),n=s.querySelector('[data-name="projects"]'),o=s.querySelector('[data-name="media"]'),a=t.querySelector(`[data-position-${t.dataset.name}="outer"]`),r=t.querySelectorAll(`[data-position-${t.dataset.name}="inner"]`);switch(console.log(r),e.initStateLinks(),t.style.width="100%",t.dataset.name){case"about":l.style.left="100%",n.style.right="-50%",o.style.right="-70%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-3").classList.add("slide-3__scrolled")}));break;case"hobby":i.style.left="-25%",t.style.left=0,n.style.right="-25%",o.style.right="-50%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>{console.log(e),e.style.display="block"})}));break;case"projects":i.style.left="-50%",l.style.left="-25%",t.style.right=0,o.style.right="-25%",r.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-2").classList.add("slide-2__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled")})),t.addEventListener("animationend",(function(){a.style.display="none",r.forEach(e=>e.style.display="block")}));break;case"media":i.style.left="-75%",l.style.left="-50%",n.style.right="100%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.querySelector(".slide-2").addEventListener("animationend",(function(){}))}sessionStorage.setItem("order",t.dataset.order)},expandPrimarySectionOnDesktop:t=>{const s=e.$el(".section-slider-desktop"),i=s.querySelector('[data-name="about"]'),l=s.querySelector('[data-name="hobby"]'),o=s.querySelector('[data-name="projects"]'),r=s.querySelector('[data-name="media"]');switch(a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),t.style.width="95%",sessionStorage.setItem("order",t.dataset.order),t.dataset.name){case"about":t.querySelector(".section-desktop__content").style.right="calc(100% - 413px)",i.style.left="2.5%",l.style.left="97.5%",o.style.right="-25%",r.style.right="-90%";break;case"hobby":t.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",l.style.left="2.5%",o.style.right="-10%",r.style.right="-40%";break;case"projects":t.querySelector(".section-name").style.left="0",i.style.left="-50%",l.style.left="-20%",o.style.right="2.5%",r.style.right="-30%";break;case"media":i.style.left="-60%",l.style.left="-30%",o.style.right="97.5%",r.style.right="2.5%"}e.initStateLinks()},changePage:t=>{t.preventDefault(),e.$el("main").classList.add("page-changing"),e.clearState(),setTimeout(()=>window.location.href=t.target.href,700)},checkIsActiveLink:e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")}},t=document.getElementById("animationsPolygon"),s=document.getElementById("hamburgerSection"),i=e.$el(".primary"),l=e.$el(".news"),n=(e,t=2,s=15,i=!0)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(s),scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),this.slides.forEach((t,s)=>{s===e?t.querySelector(".active-content").classList.remove("active-content__inactive"):t.querySelector(".active-content").classList.add("active-content__inactive")})}}})},a=e=>new Swiper(e,{direction:"vertical",slidesPerView:"auto",freeMode:!0,scrollbar:{el:".swiper-scrollbar"},navigation:{nextEl:".vertical-text-next",prevEl:".vertical-text-prev ",lockClass:"d-none"},mousewheel:!0});let r=!1;const d=setInterval(()=>{s.querySelector(".active")&&e.$el(".hamburger__section__finally_opened")&&(e.checkIsActiveLink(e.$el(".active")),r=!0),r&&clearInterval(d)},100);t.insertAdjacentElement("afterbegin",s.cloneNode(!0)),t.querySelector("#hamburgerSection").id="";const c=t.querySelectorAll("a");if(c.forEach((e,t)=>{t!==c.length-1&&(e.style.width="auto",e.style.visibility="visible")}),e.$el(".desktop-links").querySelectorAll("a").forEach(t=>t.addEventListener("click",(function(t){e.changePage(t)}))),s.addEventListener("click",(function(t){s.classList.add("hamburger__section__opened"),s.addEventListener("animationend",()=>{s.classList.add("hamburger__section__finally_opened"),s.querySelectorAll("a").forEach((t,s)=>{s!==c.length-1&&(t.style.width=c[s].offsetWidth+"px",t.addEventListener("click",(function(t){e.changePage(t)})))})})})),i)if(e.isState())e.isDesktop()?(console.log("hey"),o(sessionStorage.getItem("order")),a("#desktopVerticalTextSlider"),n(".hobbydesktop-","auto"),n(".projectsdesktop-","auto"),n(".mediadesktop-","auto"),e.$el("main").style.opacity="1"):(new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(sessionStorage.getItem("test"))}),a("#mobileVerticalTextSlider"),n(".projects-slider",2,15,!1),n(".hobby-slider",2,15,!1),n(".podcast-slider",2,15,!1),e.$el("main").style.transition="all .25s",setTimeout(()=>e.$el("main").style.opacity="1",1400)),e.initStateLinks(),e.clearState();else{e.$el("main").style.opacity="1";document.getElementById("primarySlider");const t=document.querySelectorAll(".section"),s=e.$el(".section-slider-desktop").querySelectorAll(".section-desktop"),i=document.getElementById("primarySwiperDesktop"),l=e.$el(".inner-section-slider");let r=!1;t.forEach(t=>{t.addEventListener("click",(function(s){if(!r){const s=t.querySelector(".slide-1").nextElementSibling;s.querySelector(".inner-section-slider")||(s.insertAdjacentElement("afterbegin",l.cloneNode(!0)),l.innerHTML=""),e.expandPrimarySection(t),r=!0,setTimeout(()=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),sessionStorage.setItem("test",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(t.dataset.inner)})},400),setTimeout(()=>{a("#mobileVerticalTextSlider")},950),setTimeout(()=>{n(".hobby-slider",2,15,!1)},1450),setTimeout(()=>{n(".projects-slider",2,15,!1),n(".podcast-slider",2,15,!1)},1700)}}))}),s.forEach(t=>{t.addEventListener("click",(function(){o(t.dataset.order),e.expandPrimarySectionOnDesktop(t),t.addEventListener("transitionend",()=>{i.style.top="0",setTimeout(()=>{i.classList.add("showed")},350)})}))})}if(e.$el(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"},breakpoints:{996:{slidesPerView:2}}}),l){r&&clearInterval(d);let e=200;l.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),window.addEventListener("load",()=>{new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})})}e.$el(".single-page")&&new Swiper(".singlepagedesktop-",{direction:"vertical",loop:!0,slidesPerView:"auto",spaceBetween:15,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".singlepagedesktop-next",prevEl:".singlepagedesktop-prev",lockClass:"d-none"}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInV0aWxzIiwiJGVsIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwic2V0U3RhdGUiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJpbm5lckhUTUwiLCJjbGVhclN0YXRlIiwicmVtb3ZlSXRlbSIsImluaXRTdGF0ZUxpbmtzIiwic2V0VGltZW91dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsaW5rIiwiaXNTdGF0ZSIsImdldEl0ZW0iLCJpc0Rlc2t0b3AiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiZXhwYW5kUHJpbWFyeVNlY3Rpb24iLCJzZWN0aW9uIiwicHJpbWFyeVdyYXBwZXIiLCJhYm91dCIsImhvYmJ5IiwicHJvamVjdHMiLCJtZWRpYSIsImlubmVyTmFtZSIsImRhdGFzZXQiLCJuYW1lIiwic3R5bGUiLCJ3aWR0aCIsImxlZnQiLCJyaWdodCIsImNsYXNzTGlzdCIsImFkZCIsImZvckVhY2giLCJkaXNwbGF5IiwibG9nIiwib3V0ZXJOYW1lIiwib3JkZXIiLCJleHBhbmRQcmltYXJ5U2VjdGlvbk9uRGVza3RvcCIsImRlc2t0b3BQcmltYXJ5V3JhcHBlciIsImluaXRWZXJ0aWNhbFNsaWRlciIsImluaXRWZXJ0aWNhbFRleHRTbGlkZXIiLCJlIiwibG9jYXRpb24iLCJocmVmIiwidGFyZ2V0IiwiY2hlY2tJc0FjdGl2ZUxpbmsiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZ2V0RWxlbWVudEJ5SWQiLCJwcmltYXJ5Iiwic3BhY2VCZXR3ZWVuIiwiaXNOYXZpZ2F0aW9uIiwiU3dpcGVyIiwiYW5pbWF0aW9uc1BvbHlnb24iLCJoYW1idXJnZXJNZW51Iiwic2xpZGVzUGVyVmlldyIsIk51bWJlciIsInNjcm9sbGJhciIsIm9uIiwiYWZ0ZXJJbml0IiwiZGVsYXkiLCJ0aGlzIiwic2xpZGUiLCJuIiwib3BhY2l0eSIsImtleWJvYXJkIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInNsaWNlIiwiaW5kZXhPZiIsInByZXZFbCIsImxvY2tDbGFzcyIsImluaXRpYWxTbGlkZVBvc2lpdG9uIiwibG9vcCIsImxvb3BlZFNsaWRlcyIsImNlbnRlcmVkU2xpZGVzIiwiaW5pdGlhbFNsaWRlIiwiaW5pdERlc2t0b3BJbm5lclNsaWRlciIsImVuYWJsZWQiLCJhY3RpdmVJbmRleCIsInNsaWRlcyIsInN3aXBlclNsaWRlSW5kZXgiLCJvbmx5SW5WaWV3cG9ydCIsInJlbW92ZSIsImRpcmVjdGlvbiIsImZyZWVNb2RlIiwiZWwiLCJtb3VzZXdoZWVsIiwic2V0SW50ZXJ2YWwiLCJpc01hcmtlZCIsImNsZWFySW50ZXJ2YWwiLCJtZW51SW50ZXJ2YWwiLCJjbG9uZU5vZGUiLCJpZCIsImhlYWRlckxpbmtzQ29weSIsImEiLCJpIiwidmlzaWJpbGl0eSIsImNoYW5nZVBhZ2UiLCJsZW5ndGgiLCJvZmZzZXRXaWR0aCIsImNvbnNvbGUiLCJzbGlkZUNoYW5nZSIsInRyYW5zaXRpb24iLCJkZXNrdG9wUHJpbWFyeVNlY3Rpb25zIiwiZGVza3RvcFByaW1hcnlJbm5lclNsaWRlciIsInByaW1hcnlTbGlkZXJTZWN0aW9uIiwiJGlubmVyU2xpZGVyRWwiLCJpc1ByaW1hcnlFeHBhbmRlZCIsIm5leHRFbGVtZW50U2libGluZyIsImluc2VydEFkamFjZW50RWxlbWVudCIsInRvcCIsInZlcnRpY2FsQ2xhc3MiLCI5OTYiLCJuZXdzIiwiaXRlbSIsImJyZWFrcG9pbnRzIl0sIm1hcHBpbmdzIjoiQUFBQUEsU0FBU0MsaUJBQWlCLG9CQUFvQixXQUMxQyxNQUFNQyxFQUFRLENBQ1BDLElBQUdDLEdBQWFKLFNBQVNLLGNBQWNELEdBQzFDRSxTQUFVLEtBQ05DLGVBQWVDLFFBQVEsUUFBY0MsS0FBQUEsVUFBZ0JOLEVBQUlBLElBQUEsZUFBZU8sYUFFNUVDLFdBQVksS0FDUkosZUFBZUssV0FBVyxVQUU5QkMsZUFBZ0IsS0FFWkMsV0FBaUIsS0FDY2QsU0FB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REEsVUFEQyxhQUVVTCxhQUZWLEtBTjRCZSxTQUFBLENBWTNCYSxTQUFBLEVBQ0dJLGdCQURILEdBWjJCSyxZQUFBLEVBZ0JyQ0EsV0FoQnFDLENBaUJ6QnBCLE9BQUEsc0JBQ0NHLE9BQUEsc0JBQ0FDLFVBQUEsY0FPckIxRSxFQUFNQyxJQUFJLGlCQUNWLElBQUFzRCxPQUFBLHNCQUFBLENBRUlnQyxVQUFBLFdBQ0FBLE1BQVcsRUFDTDdCLGNBSHdCLE9BSTlCQSxhQUFlLEdBQ2ZMLFVBTDhCLENBTXJCOEQsY0FBRSxVQU5tQnRELEdBQUEsQ0FTMUJDLFVBQUEsV0FDVyxJQUFBQyxFQUFZLElBQ1ZDLEtBQVRtQixPQUFBL0MsUUFBQSxDQUFBNkIsRUFBQUMsS0FDWTlCLFdBQVM2QixLQUNOQSxFQUFNbkMsTUFBQXFDLFFBQUEsS0FDREEsR0FEaEJKLEdBQUEsUUFia0JLLFNBQUEsQ0FvQnBCYSxTQUFBLEVBQ0NJLGdCQURELEdBcEJvQkssWUFBQSxFQXlCOUJyQixXQUFBLENBQ1VDLE9BQUUsMEJBQ0NHLE9BQUEsMEJBQ0FDLFVBQUEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgdXRpbHMgPSB7XHJcbiAgICAgICAgJGVsOiAoc2VsZWN0b3IpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxyXG4gICAgICAgIHNldFN0YXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3N0YXRlJywgSlNPTi5zdHJpbmdpZnkodXRpbHMuJGVsKCcuaW5kZXgtbWFpbicpLmlubmVySFRNTCkpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbGVhclN0YXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oJ3N0YXRlJylcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXRTdGF0ZUxpbmtzOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vINCh0YHRi9C70LrQuCwg0L/RgNC4INC60LvQuNC60LUg0L3QsCDQutC+0YLQvtGA0YvRhSDRgdC+0YXRgNCw0L3Rj9C10YLRgdGPINGB0L7RgdGC0L7Rj9C90LjQtSDRhNGA0L7QvdGC0LAg0L3QsCDQs9C70LDQstC90L7QuSDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdGF0ZS1saW5rJylcclxuICAgICAgICAgICAgICAgIHN0YXRlTGlua3MuZm9yRWFjaChsaW5rID0+IGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuc2V0U3RhdGUoKVxyXG4gICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIH0sIDEwMDApXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1N0YXRlOiAoKSA9PiAhIXNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3N0YXRlJyksXHJcbiAgICAgICAgaXNEZXNrdG9wOiAoKSA9PiB3aW5kb3cuaW5uZXJXaWR0aCA+PSA5OTYsXHJcbiAgICAgICAgZXhwYW5kUHJpbWFyeVNlY3Rpb246IChzZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlXcmFwcGVyID0gdXRpbHMuJGVsKCcuc2VjdGlvbi1zbGlkZXInKVxyXG4gICAgICAgICAgICBjb25zdCBhYm91dCA9IHByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJhYm91dFwiXScpXHJcbiAgICAgICAgICAgIGNvbnN0IGhvYmJ5ID0gcHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cImhvYmJ5XCJdJylcclxuICAgICAgICAgICAgY29uc3QgcHJvamVjdHMgPSBwcmltYXJ5V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYW1lPVwicHJvamVjdHNcIl0nKVxyXG4gICAgICAgICAgICBjb25zdCBtZWRpYSA9IHByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW5hbWU9XCJtZWRpYVwiXScpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBvdXRlck5hbWUgPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXBvc2l0aW9uLSR7c2VjdGlvbi5kYXRhc2V0Lm5hbWV9PVwib3V0ZXJcIl1gKVxyXG4gICAgICAgICAgICBjb25zdCBpbm5lck5hbWUgPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLXBvc2l0aW9uLSR7c2VjdGlvbi5kYXRhc2V0Lm5hbWV9PVwiaW5uZXJcIl1gKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpbm5lck5hbWUpXHJcbiAgICAgICAgICAgIHV0aWxzLmluaXRTdGF0ZUxpbmtzKClcclxuICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS53aWR0aCA9ICcxMDAlJ1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHNlY3Rpb24uZGF0YXNldC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhYm91dCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICcxMDAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJy01MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTcwJSdcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTEnKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0xX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTMnKS5jbGFzc0xpc3QuYWRkKCdzbGlkZS0zX19zY3JvbGxlZCcpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hvYmJ5JzpcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy0yNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5zdHlsZS5sZWZ0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICctMjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy01MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJOYW1lLmZvckVhY2gobmFtZSA9PiBuYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0xJykuY2xhc3NMaXN0LmFkZCgnc2xpZGUtMV9fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLW5hbWUnKS5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uLW5hbWVfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMicpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTJfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRlck5hbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lck5hbWUuZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Byb2plY3RzJzpcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy01MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICctMjUlJztcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnN0eWxlLnJpZ2h0ID0gMFxyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy0yNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJOYW1lLmZvckVhY2gobmFtZSA9PiBuYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZScpXHJcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0yJykuY2xhc3NMaXN0LmFkZCgnc2xpZGUtMl9fc2Nyb2xsZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLW5hbWUnKS5jbGFzc0xpc3QuYWRkKCdzZWN0aW9uLW5hbWVfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRlck5hbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lck5hbWUuZm9yRWFjaChuYW1lID0+IG5hbWUuc3R5bGUuZGlzcGxheSA9ICdibG9jaycpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhJzpcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy03NSUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICctNTAlJztcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0cy5zdHlsZS5yaWdodCA9ICcxMDAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJy0xMDAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMScpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTFfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbi5xdWVyeVNlbGVjdG9yKCcuc2xpZGUtMicpLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLTJfX3Njcm9sbGVkJylcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNsaWRlLTInKS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7fSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdvcmRlcicsIHNlY3Rpb24uZGF0YXNldC5vcmRlcilcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4cGFuZFByaW1hcnlTZWN0aW9uT25EZXNrdG9wOiAoc2VjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkZXNrdG9wUHJpbWFyeVdyYXBwZXIgPSB1dGlscy4kZWwoJy5zZWN0aW9uLXNsaWRlci1kZXNrdG9wJylcclxuICAgICAgICAgICAgY29uc3QgYWJvdXQgPSBkZXNrdG9wUHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cImFib3V0XCJdJylcclxuICAgICAgICAgICAgY29uc3QgaG9iYnkgPSBkZXNrdG9wUHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cImhvYmJ5XCJdJylcclxuICAgICAgICAgICAgY29uc3QgcHJvamVjdHMgPSBkZXNrdG9wUHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cInByb2plY3RzXCJdJylcclxuICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBkZXNrdG9wUHJpbWFyeVdyYXBwZXIucXVlcnlTZWxlY3RvcignW2RhdGEtbmFtZT1cIm1lZGlhXCJdJylcclxuICAgICAgICAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI2Rlc2t0b3BWZXJ0aWNhbFRleHRTbGlkZXInKVxyXG4gICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieWRlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wcm9qZWN0c2Rlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5tZWRpYWRlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICBzZWN0aW9uLnN0eWxlLndpZHRoID0gJzk1JSdcclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCBzZWN0aW9uLmRhdGFzZXQub3JkZXIpXHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2VjdGlvbi5kYXRhc2V0Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2Fib3V0JzpcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zZWN0aW9uLWRlc2t0b3BfX2NvbnRlbnQnKS5zdHlsZS5yaWdodCA9ICdjYWxjKDEwMCUgLSA0MTNweCknXHJcbiAgICAgICAgICAgICAgICAgICAgYWJvdXQuc3R5bGUubGVmdCA9ICcyLjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGhvYmJ5LnN0eWxlLmxlZnQgPSAnOTcuNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnLTI1JSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctOTAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaG9iYnknOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tZGVza3RvcF9fY29udGVudCcpLnN0eWxlLmxlZnQgPSAnMHB4J1xyXG4gICAgICAgICAgICAgICAgICAgIGFib3V0LnN0eWxlLmxlZnQgPSAnLTMwJSdcclxuICAgICAgICAgICAgICAgICAgICBob2JieS5zdHlsZS5sZWZ0ID0gJzIuNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHMuc3R5bGUucmlnaHQgPSAnLTEwJSdcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5zdHlsZS5yaWdodCA9ICctNDAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncHJvamVjdHMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb24ucXVlcnlTZWxlY3RvcignLnNlY3Rpb24tbmFtZScpLnN0eWxlLmxlZnQgPSAnMCdcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy01MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICctMjAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJzIuNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgbWVkaWEuc3R5bGUucmlnaHQgPSAnLTMwJSdcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhJzpcclxuICAgICAgICAgICAgICAgICAgICBhYm91dC5zdHlsZS5sZWZ0ID0gJy02MCUnXHJcbiAgICAgICAgICAgICAgICAgICAgaG9iYnkuc3R5bGUubGVmdCA9ICctMzAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RzLnN0eWxlLnJpZ2h0ID0gJzk3LjUlJ1xyXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLnN0eWxlLnJpZ2h0ID0gJzIuNSUnXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXRpbHMuaW5pdFN0YXRlTGlua3MoKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2hhbmdlUGFnZTogKGUpID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgIHV0aWxzLiRlbCgnbWFpbicpLmNsYXNzTGlzdC5hZGQoJ3BhZ2UtY2hhbmdpbmcnKVxyXG4gICAgICAgICAgICB1dGlscy5jbGVhclN0YXRlKClcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGUudGFyZ2V0LmhyZWYsIDcwMClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNoZWNrSXNBY3RpdmVMaW5rOiAobGluaykgPT4ge1xyXG4gICAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIGxpbmsucHJldmlvdXNFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUtZGl2aWRlcicpXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhbmltYXRpb25zUG9seWdvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbmltYXRpb25zUG9seWdvbicpXHJcbiAgICBjb25zdCBoYW1idXJnZXJNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hhbWJ1cmdlclNlY3Rpb24nKVxyXG4gICAgY29uc3QgcHJpbWFyeSA9IHV0aWxzLiRlbCgnLnByaW1hcnknKVxyXG4gICAgY29uc3QgbmV3cyA9IHV0aWxzLiRlbCgnLm5ld3MnKVxyXG5cclxuICAgIGNvbnN0IGluaXRWZXJ0aWNhbFNsaWRlciA9ICgkZWwsIHNsaWRlc1BlclZpZXcgPSAyLCBzcGFjZUJldHdlZW4gPSAxNSwgaXNOYXZpZ2F0aW9uID0gdHJ1ZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3dpcGVyKCRlbCwge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogc2xpZGVzUGVyVmlldyxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiBOdW1iZXIoc3BhY2VCZXR3ZWVuKSxcclxuICAgICAgICAgICAgc2Nyb2xsYmFyOiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbENsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJJbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlbGF5ID0gNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbGlkZXMuZm9yRWFjaCgoc2xpZGUsIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheSArPSAyMDBcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuZXh0RWw6IGAkeyRlbC5zbGljZSgwLCAkZWwuaW5kZXhPZignLScpKX0tbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAkeyRlbC5zbGljZSgwLCAkZWwuaW5kZXhPZignLScpKX0tcHJldmAsXHJcbiAgICAgICAgICAgICAgICBsb2NrQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaW5pdERlc2t0b3BJbm5lclNsaWRlciA9IChpbml0aWFsU2xpZGVQb3NpaXRvbikgPT4ge1xyXG4gICAgICAgIG5ldyBTd2lwZXIoJy5wcmltYXJ5LXN3aXBlci1kZXNrdG9wJywge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiBcImF1dG9cIixcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxyXG4gICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICBsb29wZWRTbGlkZXM6IDQsXHJcbiAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBpbml0aWFsU2xpZGU6IE51bWJlcihpbml0aWFsU2xpZGVQb3NpaXRvbiksXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlSW5kZXhcclxuICAgICAgICAgICAgICAgICAgICB9ID0gdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ29yZGVyJywgdGhpcy5zbGlkZXNbYWN0aXZlSW5kZXhdLmRhdGFzZXQuc3dpcGVyU2xpZGVJbmRleClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gYWN0aXZlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUtY29udGVudCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZS1jb250ZW50X19pbmFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbGlkZS5xdWVyeVNlbGVjdG9yKCcuaW5hY3RpdmUtY29udGVudCcpLnN0eWxlLm9wYWNpdHkgPSAnMCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUtY29udGVudCcpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZS1jb250ZW50X19pbmFjdGl2ZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXRWZXJ0aWNhbFRleHRTbGlkZXIgPSAoJGVsKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTd2lwZXIoJGVsLCB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJ2ZXJ0aWNhbFwiLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiBcImF1dG9cIixcclxuICAgICAgICAgICAgZnJlZU1vZGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNjcm9sbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgZWw6IFwiLnN3aXBlci1zY3JvbGxiYXJcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgbmV4dEVsOiBgLnZlcnRpY2FsLXRleHQtbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAudmVydGljYWwtdGV4dC1wcmV2IGAsXHJcbiAgICAgICAgICAgICAgICBsb2NrQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNNYXJrZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0IG1lbnVJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAoaGFtYnVyZ2VyTWVudS5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJykgJiYgdXRpbHMuJGVsKCcuaGFtYnVyZ2VyX19zZWN0aW9uX19maW5hbGx5X29wZW5lZCcpKSB7XHJcbiAgICAgICAgICAgIHV0aWxzLmNoZWNrSXNBY3RpdmVMaW5rKHV0aWxzLiRlbCgnLmFjdGl2ZScpKVxyXG4gICAgICAgICAgICBpc01hcmtlZCA9IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICAgaXNNYXJrZWQgJiYgY2xlYXJJbnRlcnZhbChtZW51SW50ZXJ2YWwpXHJcbiAgICB9LCAxMDApXHJcblxyXG4gICAgLy8g0JrQu9C+0L3QuNGA0YPQtdC8INGI0LDQv9C60YMsINGH0YLQvtCx0Ysg0LLRi9GH0LjRgdC70LjRgtGMINC00LvQuNC90YMg0L/Rg9C90LrRgtC+0LIg0LzQtdC90Y4g0LTQu9GPINC40YUg0L/Qu9Cw0LLQvdC+0Lkg0LDQvdC40LzQsNGG0LjQuFxyXG4gICAgYW5pbWF0aW9uc1BvbHlnb24uaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgaGFtYnVyZ2VyTWVudS5jbG9uZU5vZGUodHJ1ZSkpXHJcbiAgICBhbmltYXRpb25zUG9seWdvbi5xdWVyeVNlbGVjdG9yKCcjaGFtYnVyZ2VyU2VjdGlvbicpLmlkID0gJydcclxuICAgIGNvbnN0IGhlYWRlckxpbmtzQ29weSA9IGFuaW1hdGlvbnNQb2x5Z29uLnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKVxyXG4gICAgaGVhZGVyTGlua3NDb3B5LmZvckVhY2goKGEsIGkpID0+IHtcclxuICAgICAgICBpZiAoaSAhPT0gaGVhZGVyTGlua3NDb3B5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgYS5zdHlsZS53aWR0aCA9ICdhdXRvJ1xyXG4gICAgICAgICAgICBhLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSdcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHV0aWxzLiRlbCgnLmRlc2t0b3AtbGlua3MnKS5xdWVyeVNlbGVjdG9yQWxsKCdhJykuZm9yRWFjaChhID0+IGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHV0aWxzLmNoYW5nZVBhZ2UoZSlcclxuICAgIH0pKVxyXG5cclxuICAgIGhhbWJ1cmdlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LmFkZCgnaGFtYnVyZ2VyX19zZWN0aW9uX19vcGVuZWQnKVxyXG4gICAgICAgIGhhbWJ1cmdlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBoYW1idXJnZXJNZW51LmNsYXNzTGlzdC5hZGQoJ2hhbWJ1cmdlcl9fc2VjdGlvbl9fZmluYWxseV9vcGVuZWQnKVxyXG4gICAgICAgICAgICBoYW1idXJnZXJNZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKS5mb3JFYWNoKChhLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaGVhZGVyTGlua3NDb3B5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnN0eWxlLndpZHRoID0gaGVhZGVyTGlua3NDb3B5W2ldLm9mZnNldFdpZHRoICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgICAgIGEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5jaGFuZ2VQYWdlKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyDQldGB0LvQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0L3QsCDQs9C70LDQstC90L7QuVxyXG4gICAgaWYgKHByaW1hcnkpIHtcclxuICAgICAgICBpZiAodXRpbHMuaXNTdGF0ZSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlscy5pc0Rlc2t0b3AoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2hleScpXHJcbiAgICAgICAgICAgICAgICBpbml0RGVza3RvcElubmVyU2xpZGVyKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ29yZGVyJykpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxUZXh0U2xpZGVyKCcjZGVza3RvcFZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieWRlc2t0b3AtJywgJ2F1dG8nKVxyXG4gICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcucHJvamVjdHNkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFNsaWRlcignLm1lZGlhZGVza3RvcC0nLCAnYXV0bycpXHJcbiAgICAgICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXcgU3dpcGVyKCcjaW5uZXJQcmltYXJ5U2xpZGVyJywge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBsb29wZWRTbGlkZXM6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVDaGFuZ2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVJbmRleFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA9IHRoaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ29yZGVyJywgdGhpcy5zbGlkZXNbYWN0aXZlSW5kZXhdLmRhdGFzZXQuc3dpcGVyU2xpZGVJbmRleClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxTbGlkZTogTnVtYmVyKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3Rlc3QnKSksXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsVGV4dFNsaWRlcignI21vYmlsZVZlcnRpY2FsVGV4dFNsaWRlcicpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wcm9qZWN0cy1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5ob2JieS1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wb2RjYXN0LXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgIHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLnRyYW5zaXRpb24gPSAnYWxsIC4yNXMnXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHV0aWxzLiRlbCgnbWFpbicpLnN0eWxlLm9wYWNpdHkgPSAnMScsIDE0MDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXRpbHMuaW5pdFN0YXRlTGlua3MoKVxyXG4gICAgICAgICAgICB1dGlscy5jbGVhclN0YXRlKClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1dGlscy4kZWwoJ21haW4nKS5zdHlsZS5vcGFjaXR5ID0gJzEnXHJcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlTbGlkZXJTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW1hcnlTbGlkZXInKVxyXG4gICAgICAgICAgICBjb25zdCBwcmltYXJ5U2VjdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VjdGlvbicpXHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2t0b3BQcmltYXJ5V3JhcHBlciA9IHV0aWxzLiRlbCgnLnNlY3Rpb24tc2xpZGVyLWRlc2t0b3AnKVxyXG4gICAgICAgICAgICBjb25zdCBkZXNrdG9wUHJpbWFyeVNlY3Rpb25zID0gZGVza3RvcFByaW1hcnlXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWN0aW9uLWRlc2t0b3AnKVxyXG4gICAgICAgICAgICBjb25zdCBkZXNrdG9wUHJpbWFyeUlubmVyU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW1hcnlTd2lwZXJEZXNrdG9wJylcclxuICAgICAgICAgICAgY29uc3QgJGlubmVyU2xpZGVyRWwgPSB1dGlscy4kZWwoJy5pbm5lci1zZWN0aW9uLXNsaWRlcicpXHJcblxyXG4gICAgICAgICAgICBsZXQgaXNQcmltYXJ5RXhwYW5kZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQutC70LjQuiDQvdCwINCz0LvQsNCy0L3QvtC5INCyINC80L7QsdC40LvRjNC90L7QuSDQstC10YDRgdC40LhcclxuICAgICAgICAgICAgcHJpbWFyeVNlY3Rpb25zLmZvckVhY2goc2VjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJpbWFyeUV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdyYXBwZXIgPSBzZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZS0xJykubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghd3JhcHBlci5xdWVyeVNlbGVjdG9yKCcuaW5uZXItc2VjdGlvbi1zbGlkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JhcHBlci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FmdGVyYmVnaW4nLCAkaW5uZXJTbGlkZXJFbC5jbG9uZU5vZGUodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5uZXJTbGlkZXJFbC5pbm5lckhUTUwgPSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmV4cGFuZFByaW1hcnlTZWN0aW9uKHNlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJpbWFyeUV4cGFuZGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTd2lwZXIoJyNpbm5lclByaW1hcnlTbGlkZXInLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogXCJhdXRvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BlZFNsaWRlczogNCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ID0gdGhpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnb3JkZXInLCB0aGlzLnNsaWRlc1thY3RpdmVJbmRleF0uZGF0YXNldC5zd2lwZXJTbGlkZUluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndGVzdCcsIHRoaXMuc2xpZGVzW2FjdGl2ZUluZGV4XS5kYXRhc2V0LnN3aXBlclNsaWRlSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IE51bWJlcihzZWN0aW9uLmRhdGFzZXQuaW5uZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRWZXJ0aWNhbFRleHRTbGlkZXIoJyNtb2JpbGVWZXJ0aWNhbFRleHRTbGlkZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCA5NTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcuaG9iYnktc2xpZGVyJywgMiwgMTUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxNDUwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGluaXRWZXJ0aWNhbFRleHRTbGlkZXIoJyNtb2JpbGVWZXJ0aWNhbFRleHRTbGlkZXInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaW5pdFZlcnRpY2FsU2xpZGVyKCcuaG9iYnktc2xpZGVyJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSwgMTcwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wcm9qZWN0cy1zbGlkZXInLCAyLCAxNSwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0VmVydGljYWxTbGlkZXIoJy5wb2RjYXN0LXNsaWRlcicsIDIsIDE1LCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTcwMClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgLy8g0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INC60LvQuNC6INC90LAg0LPQu9Cw0LLQvdC+0Lkg0LIg0LTQtdGB0LrRgtC+0L/QvdC+0Lkg0LLQtdGA0YHQuNC4XHJcbiAgICAgICAgICAgIGRlc2t0b3BQcmltYXJ5U2VjdGlvbnMuZm9yRWFjaChzZWN0aW9uID0+IHtcclxuICAgICAgICAgICAgICAgIHNlY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdERlc2t0b3BJbm5lclNsaWRlcihzZWN0aW9uLmRhdGFzZXQub3JkZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuZXhwYW5kUHJpbWFyeVNlY3Rpb25PbkRlc2t0b3Aoc2VjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2t0b3BQcmltYXJ5SW5uZXJTbGlkZXIuc3R5bGUudG9wID0gJzAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVza3RvcFByaW1hcnlJbm5lclNsaWRlci5jbGFzc0xpc3QuYWRkKCdzaG93ZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzNTApXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh1dGlscy4kZWwoJy5ibGFjay1zbGlkZXInKSkge1xyXG4gICAgICAgIG5ldyBTd2lwZXIoJy5ibGFjay1zbGlkZXInLCB7XHJcbiAgICAgICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxyXG4gICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0LFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSA2MDBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgICAgICAgIG5leHRFbDogYC5ibGFjay1zbGlkZXItbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAuYmxhY2stc2xpZGVyLXByZXZgLFxyXG4gICAgICAgICAgICAgICAgbG9ja0NsYXNzOiAnZC1ub25lJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgOTk2OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXdzKSB7XHJcbiAgICAgICAgaXNNYXJrZWQgJiYgY2xlYXJJbnRlcnZhbChtZW51SW50ZXJ2YWwpXHJcbiAgICAgICAgbGV0IGRlbGF5ID0gMjAwXHJcbiAgICAgICAgbmV3cy5xdWVyeVNlbGVjdG9yQWxsKCcubmV3cy1pdGVtJykuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBpdGVtLnN0eWxlLm9wYWNpdHkgPSAxLCBkZWxheSlcclxuICAgICAgICAgICAgZGVsYXkgKz0gMjAwXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBTd2lwZXIoJy5ob3Jpem9udGFsLWRlc2t0b3Atc2xpZGVyJywge1xyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcclxuICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICA5OTY6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMzYsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGtleWJvYXJkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRFbDogYC5zd2lwZXItYnV0dG9uLW5leHRgLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZFbDogYC5zd2lwZXItYnV0dG9uLXByZXZgLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2tDbGFzczogJ2Qtbm9uZSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXRpbHMuJGVsKCcuc2luZ2xlLXBhZ2UnKSkge1xyXG4gICAgICAgIC8vIGluaXRWZXJ0aWNhbFNsaWRlcignLnNpbmdsZXBhZ2VkZXNrdG9wLScsICdhdXRvJylcclxuICAgICAgICBuZXcgU3dpcGVyKCcuc2luZ2xlcGFnZWRlc2t0b3AtJywge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDE1LFxyXG4gICAgICAgICAgICBzY3JvbGxiYXI6IHtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2FsQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGVsYXkgPSA1MDBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnN0eWxlLm9wYWNpdHkgPSAnMSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ICs9IDIwMFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBrZXlib2FyZDoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBuZXh0RWw6IGAuc2luZ2xlcGFnZWRlc2t0b3AtbmV4dGAsXHJcbiAgICAgICAgICAgICAgICBwcmV2RWw6IGAuc2luZ2xlcGFnZWRlc2t0b3AtcHJldmAsXHJcbiAgICAgICAgICAgICAgICBsb2NrQ2xhc3M6ICdkLW5vbmUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pIl19
