document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("animationsPolygon"),t=document.getElementById("hamburgerSection"),i=(document.getElementById("primarySlider"),document.querySelectorAll(".section"),document.querySelector(".primary")),s=document.querySelector(".news"),l=(e,t=2,i=15)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(i),scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),n=()=>{new Swiper("#mediaSlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,centeredSlides:!1,initialSlide:0,on:{afterInit:function(){let e=500;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}}})},o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{activeIndexChange:function(){const{activeIndex:e}=this;this.slides.forEach((t,i)=>{i===e?(t.querySelector(".active-content").style.opacity="1",t.querySelector(".inactive-content").style.opacity="0"):(t.querySelector(".active-content").style.opacity="0",t.querySelector(".inactive-content").style.opacity="1")})}}})},r=e=>document.querySelector(e),a=e=>{const t=e.querySelector(`[data-position-${e.dataset.name}="outer"]`),i=e.querySelectorAll(`[data-position-${e.dataset.name}="inner"]`);switch(e.dataset.name){case"about":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-3").classList.add("slide-3__scrolled"),l(".hobby-slider"),l(".projects-slider"),n();break;case"hobby":i.forEach(e=>e.style.display="none"),e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".section-name").classList.add("section-name__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.addEventListener("animationend",(function(){t.style.display="none",i.forEach(e=>e.style.display="block"),l(".hobby-slider"),l(".projects-slider"),n()}));break;case"projects":i.forEach(e=>e.style.display="none"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.querySelector(".section-name").classList.add("section-name__scrolled"),e.addEventListener("animationend",(function(){t.style.display="none",i.forEach(e=>e.style.display="block"),l(".projects-slider"),l(".hobby-slider"),n()}));break;case"media":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.querySelector(".slide-2").addEventListener("animationend",(function(){l(".projects-slider"),l(".hobby-slider"),n()}))}},c=e=>{const t=document.querySelector(".section-slider-desktop"),i=t.querySelector('[data-name="about"]'),s=t.querySelector('[data-name="hobby"]'),n=t.querySelector('[data-name="projects"]'),o=t.querySelector('[data-name="media"]');switch(l(".hobbydesktop-","auto"),l(".projectsdesktop-","auto"),l(".mediadesktop-","auto"),e.style.width="95%",e.dataset.name){case"about":e.querySelector(".section-desktop__content").style.right="calc(100% - 412px)",i.style.left="2.5%",s.style.left="97.5%",n.style.right="-25%",o.style.right="-50%";break;case"hobby":e.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",s.style.left="2.5%",n.style.right="-10%",o.style.right="-40%";break;case"projects":e.querySelector(".section-name").style.left="0",i.style.left="-50%",s.style.left="-20%",n.style.right="2.5%",o.style.right="-30%";break;case"media":i.style.left="-60%",s.style.left="-30%",n.style.right="97.5%",o.style.right="2.5%"}},d=e=>{e.preventDefault(),document.querySelector("main").classList.add("page-changing"),setTimeout(()=>window.location.href=e.target.href,700)},y=e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")};let u=!1;const p=setInterval(()=>{t.querySelector(".active")&&r(".hamburger__section__finally_opened")&&(y(r(".active")),u=!0),u&&clearInterval(p)},100);e.insertAdjacentElement("afterbegin",t.cloneNode(!0)),e.querySelector("#hamburgerSection").id="";const S=e.querySelectorAll("a");if(S.forEach((e,t)=>{t!==S.length-1&&(e.style.width="auto",e.style.visibility="visible")}),document.querySelector(".desktop-links").querySelectorAll("a").forEach(e=>e.addEventListener("click",(function(e){d(e)}))),t.addEventListener("click",(function(e){t.classList.add("hamburger__section__opened"),t.addEventListener("animationend",()=>{t.classList.add("hamburger__section__finally_opened"),t.querySelectorAll("a").forEach((e,t)=>{t!==S.length-1&&(e.style.width=S[t].offsetWidth+"px",e.addEventListener("click",(function(e){d(e)})))})})})),i){const e=document.querySelector(".section-slider-desktop").querySelectorAll(".section-desktop"),t=document.getElementById("primarySwiperDesktop");e.forEach(e=>{e.addEventListener("click",(function(){o(e.dataset.order),c(e),e.addEventListener("transitionend",()=>{t.style.top="0",setTimeout(()=>t.classList.add("showed"),350)})}))});const i=document.querySelector(".inner-section-slider"),s=(new Swiper(".projects-slider",{direction:"vertical",loop:!1,slidesPerView:2,spaceBetween:15,scrollbar:{verticalClass:"d-none"},navigation:{nextEl:".projects-next",prevEl:".projects-prev",lockClass:"d-none"},on:{}}),e=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},initialSlide:Number(e),on:{slideChange:function(e){console.log(e.slides[e.activeIndex].childNode)}}})});new Swiper("#primarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,initialSlide:0,on:{init:function(){this.slides.forEach((e,t)=>{e.style.zIndex=this.slides.length-t}),this.slides[this.activeIndex].style.zIndex=10},click:function(e,t){const l=t.path.find(e=>{if(e.classList)return Array.from(e.classList).includes("swiper-slide-active")});l&&(l.style.width="102%",l.style.boxShadow="none",e.disable(),l.addEventListener("transitionend",(function(){const e=l.querySelector(".section");let t;switch(e.dataset.name){case"about":t=e.querySelector(".slide-3"),t.querySelector(".inner-section-slider")||(e.querySelector(".slide-3").insertAdjacentElement("afterbegin",i.cloneNode(!0)),i.innerHTML="",s(e.dataset.inner),a(e));break;case"hobby":case"projects":case"media":t=e.querySelector(".slide-2"),t.querySelector(".inner-section-slider")||(e.querySelector(".slide-2").insertAdjacentElement("afterbegin",i.cloneNode(!0)),i.innerHTML="",s(e.dataset.inner),a(e))}})))}}})}if(r(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"}}),s){u&&clearInterval(p);let e=200;s.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})}r(".single-page")&&l(".single-slider","auto",30)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
