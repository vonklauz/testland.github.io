document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("animationsPolygon"),t=document.getElementById("hamburgerSection"),s=Array.from(document.querySelectorAll(".section")),l=document.querySelector(".primary"),i=document.querySelector(".news"),n=e=>document.querySelector(e),o=(e,t=250)=>e.querySelectorAll(".swiper-slide").forEach((e,s)=>{setTimeout(()=>{e.style.opacity="1"},t),t+=200}),r=e=>{e.preventDefault(),console.log(e.target),document.querySelector("main").classList.add("page-changing"),setTimeout(()=>window.location.href=e.target.href,700)},a=e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")};let c=!1;const d=setInterval(()=>{t.querySelector(".active")&&n(".hamburger__section__finally_opened")&&(a(n(".active")),c=!0),c&&clearInterval(d)},100);e.insertAdjacentElement("afterbegin",t.cloneNode(!0)),e.querySelector("#hamburgerSection").id="";const u=e.querySelectorAll("a");if(u.forEach((e,t)=>{t!==u.length-1&&(e.style.width="auto",e.style.visibility="visible")}),document.querySelector(".desktop-links").querySelectorAll("a").forEach(e=>e.addEventListener("click",(function(e){r(e)}))),t.addEventListener("click",(function(e){t.classList.add("hamburger__section__opened"),t.addEventListener("animationend",()=>{t.classList.add("hamburger__section__finally_opened"),t.querySelectorAll("a").forEach((e,t)=>{t!==u.length-1&&(e.style.width=u[t].offsetWidth+"px",e.addEventListener("click",(function(e){r(e)})))})})})),l){s.forEach(e=>{e.addEventListener("click",(function(t){"about"===e.dataset.name||"hobby"===e.dataset.name||"projects"===e.dataset.name?(document.querySelector(".primary").style.paddingLeft="0",e.classList.add("chosen-full")):e.classList.add("chosen");const s=e.previousElementSibling;e.addEventListener("animationend",(function(t){switch(e.dataset.name){case"about":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-3").classList.add("slide-3__scrolled");case"hobby":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".section-name").classList.add("section-name__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.addEventListener("animationend",(function(){o(document.querySelector(".hobby-slider"))}));case"projects":e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.style.width="100vw",e.querySelector(".section-name").classList.add("section-name__scrolled"),e.addEventListener("animationend",(function(){o(document.querySelector(".projects-slider"))}));case"media":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.querySelector(".slide-2").addEventListener("animationend",(function(){let t=250;e.querySelectorAll(".podcast-col").forEach(e=>{setTimeout(()=>e.style.opacity="1",t),t+=200})}))}})),s&&(s.classList.add("hidden-"+s.dataset.order),s.style.marginLeft=`calc(-1 * (100vw - 33px) / 4 * ${s.dataset.order})`)}))});new Swiper(".projects-slider",{direction:"vertical",loop:!1,slidesPerView:2,spaceBetween:15,scrollbar:{verticalClass:"d-none"},navigation:{nextEl:".projects-next",prevEl:".projects-prev",lockClass:"d-none"},on:{}}),new Swiper(".hobby-slider",{direction:"vertical",loop:!1,slidesPerView:2,spaceBetween:15,scrollbar:{verticalClass:"d-none"},navigation:{nextEl:".hobby-next",prevEl:".hobby-prev",lockClass:"d-none"},on:{}})}if(i){c&&clearInterval(d);let e=200;i.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200})}if(n(".single-page")){n("#slideToText").addEventListener("click",(function(e){n(".poster").style.left="-100%"}));new Swiper(".single-page-swiper",{direction:"vertical",slidesPerView:"auto",freeMode:!0,mousewheel:!0,on:{reachEnd:function(){const e=n("#slideToText");e.style.transform="rotateZ(180deg)",e.href="/"}}})}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
