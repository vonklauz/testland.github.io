document.addEventListener("DOMContentLoaded",(function(){const e={$el:e=>document.querySelector(e),setState:()=>{sessionStorage.setItem("state",JSON.stringify(e.$el(".index-main").innerHTML))},clearState:()=>{sessionStorage.removeItem("state")},initStateLinks:()=>{setTimeout(()=>{document.querySelectorAll(".state-link").forEach(t=>t.addEventListener("click",()=>{e.setState()}))},1e3)},isState:()=>!!sessionStorage.getItem("state"),isDesktop:()=>window.innerWidth>=996,expandPrimarySection:t=>{const s=e.$el(".section-slider"),i=s.querySelector('[data-name="about"]'),n=s.querySelector('[data-name="hobby"]'),l=s.querySelector('[data-name="projects"]'),o=s.querySelector('[data-name="media"]'),r=t.querySelector(`[data-position-${t.dataset.name}="outer"]`),a=t.querySelectorAll(`[data-position-${t.dataset.name}="inner"]`);switch(e.initStateLinks(),t.style.width="100%",t.dataset.name){case"about":n.style.left="100%",l.style.right="-50%",o.style.right="-70%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-3").classList.add("slide-3__scrolled")}));break;case"hobby":i.style.left="-25%",t.style.left=0,l.style.right="-25%",o.style.right="-50%",a.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.addEventListener("animationend",(function(){r.style.display="none",a.forEach(e=>{e.style.display="block"})}));break;case"projects":i.style.left="-50%",n.style.left="-25%",t.style.right=0,o.style.right="-25%",a.forEach(e=>e.style.display="none"),t.addEventListener("transitionend",(function(){t.querySelector(".slide-2").classList.add("slide-2__scrolled"),t.querySelector(".section-name").classList.add("section-name__scrolled")})),t.addEventListener("animationend",(function(){r.style.display="none",a.forEach(e=>e.style.display="block")}));break;case"media":i.style.left="-75%",n.style.left="-50%",l.style.right="100%",t.addEventListener("transitionend",(function(){t.querySelector(".slide-1").classList.add("slide-1__scrolled"),t.querySelector(".slide-2").classList.add("slide-2__scrolled")})),t.querySelector(".slide-2").addEventListener("animationend",(function(){}))}sessionStorage.setItem("order",t.dataset.order)},expandPrimarySectionOnDesktop:t=>{const s=e.$el(".section-slider-desktop"),i=s.querySelector('[data-name="about"]'),n=s.querySelector('[data-name="hobby"]'),o=s.querySelector('[data-name="projects"]'),a=s.querySelector('[data-name="media"]');switch(r("#desktopVerticalTextSlider"),l(".hobbydesktop-","auto"),l(".projectsdesktop-","auto"),l(".mediadesktop-","auto"),t.style.width="95%",sessionStorage.setItem("order",t.dataset.order),t.dataset.name){case"about":t.querySelector(".section-desktop__content").style.right="calc(100% - 413px)",i.style.left="2.5%",n.style.left="97.5%",o.style.right="-25%",a.style.right="-90%";break;case"hobby":t.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",n.style.left="2.5%",o.style.right="-10%",a.style.right="-40%";break;case"projects":t.querySelector(".section-name").style.left="0",i.style.left="-50%",n.style.left="-20%",o.style.right="2.5%",a.style.right="-30%";break;case"media":i.style.left="-60%",n.style.left="-30%",o.style.right="97.5%",a.style.right="2.5%"}e.initStateLinks()},changePage:t=>{t.preventDefault(),e.$el("main").classList.add("page-changing"),e.clearState(),setTimeout(()=>window.location.href=t.target.href,700)},checkIsActiveLink:e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")}},t=document.getElementById("animationsPolygon"),s=document.getElementById("hamburgerSection"),i=e.$el(".primary"),n=e.$el(".news"),l=(e,t=2,s=15,i=!0)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(s),scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{afterInit:function(){document.querySelectorAll(".section-desktop").forEach(e=>e.style.cursor="grab")},slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),this.slides.forEach((t,s)=>{s===e?t.querySelector(".active-content").classList.remove("active-content__inactive"):t.querySelector(".active-content").classList.add("active-content__inactive")})}}})},r=e=>new Swiper(e,{direction:"vertical",slidesPerView:"auto",freeMode:!0,scrollbar:{el:".swiper-scrollbar"},navigation:{nextEl:".vertical-text-next",prevEl:".vertical-text-prev ",lockClass:"d-none"},mousewheel:!0});let a=!1;const d=setInterval(()=>{s.querySelector(".active")&&e.$el(".hamburger__section__finally_opened")&&(e.checkIsActiveLink(e.$el(".active")),a=!0),a&&clearInterval(d)},100);t.insertAdjacentElement("afterbegin",s.cloneNode(!0)),t.querySelector("#hamburgerSection").id="";const c=t.querySelectorAll("a");if(c.forEach((e,t)=>{t!==c.length-1&&(e.style.width="auto",e.style.visibility="visible")}),document.querySelectorAll(".logo__wrapper").forEach(e=>e.addEventListener("click",e=>{e.preventDefault(),sessionStorage.removeItem("test"),sessionStorage.removeItem("order"),window.location.href="/"})),e.$el(".desktop-links").querySelectorAll("a").forEach(t=>t.addEventListener("click",(function(t){e.changePage(t)}))),s.addEventListener("click",(function(t){s.classList.add("hamburger__section__opened"),s.addEventListener("animationend",()=>{s.classList.add("hamburger__section__finally_opened"),s.querySelectorAll("a").forEach((t,s)=>{s!==c.length-1&&(t.style.width=c[s].offsetWidth+"px",t.addEventListener("click",(function(t){e.changePage(t)})))})})})),i)if(e.isState())e.isDesktop()?(o(sessionStorage.getItem("order")),r("#desktopVerticalTextSlider"),l(".hobbydesktop-","auto"),l(".projectsdesktop-","auto"),l(".mediadesktop-","auto"),e.$el("main").style.opacity="1"):(new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("test",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(sessionStorage.getItem("test"))}),r("#mobileVerticalTextSlider"),l(".projects-slider",2,15,!1),l(".hobby-slider",2,15,!1),l(".podcast-slider",2,15,!1),e.$el("main").style.transition="all .25s",setTimeout(()=>e.$el("main").style.opacity="1",1400)),e.initStateLinks(),e.clearState();else{e.$el("main").style.opacity="1";document.getElementById("primarySlider");const t=document.querySelectorAll(".section"),s=e.$el(".section-slider-desktop").querySelectorAll(".section-desktop"),i=document.getElementById("primarySwiperDesktop"),n=e.$el(".inner-section-slider");let a=!1;t.forEach(t=>{t.addEventListener("click",(function(s){if(!a){const s=t.querySelector(".slide-1").nextElementSibling;s.querySelector(".inner-section-slider")||(s.insertAdjacentElement("afterbegin",n.cloneNode(!0)),n.innerHTML=""),e.expandPrimarySection(t),a=!0,setTimeout(()=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;sessionStorage.setItem("order",this.slides[e].dataset.swiperSlideIndex),sessionStorage.setItem("test",this.slides[e].dataset.swiperSlideIndex)}},initialSlide:Number(t.dataset.inner)})},400),setTimeout(()=>{r("#mobileVerticalTextSlider")},950),setTimeout(()=>{l(".hobby-slider",2,15,!1)},1450),setTimeout(()=>{l(".projects-slider",2,15,!1),l(".podcast-slider",2,15,!1)},1700)}}))}),s.forEach(t=>{t.addEventListener("click",(function(){o(t.dataset.order),e.expandPrimarySectionOnDesktop(t),t.addEventListener("transitionend",()=>{i.style.top="0",setTimeout(()=>{i.classList.add("showed")},350)})}))})}if(e.$el(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"},breakpoints:{996:{slidesPerView:2}}}),n){let e=200;n.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),window.addEventListener("load",()=>{new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})})}e.$el(".single-page")&&new Swiper(".singlepagedesktop-",{direction:"vertical",loop:!0,slidesPerView:"auto",spaceBetween:15,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,s)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".singlepagedesktop-next",prevEl:".singlepagedesktop-prev",lockClass:"d-none"}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
