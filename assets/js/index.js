document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("animationsPolygon"),t=document.getElementById("hamburgerSection"),i=(document.getElementById("primarySlider"),document.querySelectorAll(".section"),document.querySelector(".primary")),l=document.querySelector(".news"),s=(e,t=2,i=15)=>new Swiper(e,{direction:"vertical",loop:!0,slidesPerView:t,spaceBetween:Number(i),scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=500;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:e.slice(0,e.indexOf("-"))+"-next",prevEl:e.slice(0,e.indexOf("-"))+"-prev",lockClass:"d-none"}}),n=()=>{new Swiper("#mediaSlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,centeredSlides:!1,initialSlide:0,on:{afterInit:function(){let e=500;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}}})},o=e=>{new Swiper(".primary-swiper-desktop",{slidesPerView:"auto",spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!0,initialSlide:Number(e),keyboard:{enabled:!0,onlyInViewport:!0},on:{slideChange:function(){const{activeIndex:e}=this;this.slides.forEach((t,i)=>{i===e?(t.querySelector(".active-content").style.opacity="1",t.querySelector(".inactive-content").style.opacity="0"):(t.querySelector(".active-content").style.opacity="0",t.querySelector(".inactive-content").style.opacity="1")})}}})},r=e=>new Swiper(e,{direction:"vertical",slidesPerView:"auto",freeMode:!0,scrollbar:{el:".swiper-scrollbar"},navigation:{nextEl:".vertical-text-next",prevEl:".vertical-text-prev ",lockClass:"d-none"},mousewheel:!0}),a=e=>document.querySelector(e),c=e=>{const t=e.querySelector(`[data-position-${e.dataset.name}="outer"]`),i=e.querySelectorAll(`[data-position-${e.dataset.name}="inner"]`);switch(r("#mobileVerticalTextSlider"),s(".projects-slider"),s(".hobby-slider"),n(),e.dataset.name){case"about":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-3").classList.add("slide-3__scrolled");break;case"hobby":i.forEach(e=>e.style.display="none"),e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".section-name").classList.add("section-name__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.addEventListener("animationend",(function(){t.style.display="none",i.forEach(e=>e.style.display="block")}));break;case"projects":i.forEach(e=>e.style.display="none"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.querySelector(".section-name").classList.add("section-name__scrolled"),e.addEventListener("animationend",(function(){t.style.display="none",i.forEach(e=>e.style.display="block")}));break;case"media":e.querySelector(".slide-1").classList.add("slide-1__scrolled"),e.querySelector(".slide-2").classList.add("slide-2__scrolled"),e.querySelector(".slide-2").addEventListener("animationend",(function(){}))}},d=e=>{const t=document.querySelector(".section-slider-desktop"),i=t.querySelector('[data-name="about"]'),l=t.querySelector('[data-name="hobby"]'),n=t.querySelector('[data-name="projects"]'),o=t.querySelector('[data-name="media"]');switch(r("#desktopVerticalTextSlider"),s(".hobbydesktop-","auto"),s(".projectsdesktop-","auto"),s(".mediadesktop-","auto"),e.style.width="95%",e.dataset.name){case"about":e.querySelector(".section-desktop__content").style.right="calc(100% - 412px)",i.style.left="2.5%",l.style.left="97.5%",n.style.right="-25%",o.style.right="-50%";break;case"hobby":e.querySelector(".section-desktop__content").style.left="0px",i.style.left="-30%",l.style.left="2.5%",n.style.right="-10%",o.style.right="-40%";break;case"projects":e.querySelector(".section-name").style.left="0",i.style.left="-50%",l.style.left="-20%",n.style.right="2.5%",o.style.right="-30%";break;case"media":i.style.left="-60%",l.style.left="-30%",n.style.right="97.5%",o.style.right="2.5%"}},y=e=>{e.preventDefault(),document.querySelector("main").classList.add("page-changing"),setTimeout(()=>window.location.href=e.target.href,700)},u=e=>{e.classList.add("active"),e.previousElementSibling.classList.add("active-divider")};let p=!1;const S=setInterval(()=>{t.querySelector(".active")&&a(".hamburger__section__finally_opened")&&(u(a(".active")),p=!0),p&&clearInterval(S)},100);e.insertAdjacentElement("afterbegin",t.cloneNode(!0)),e.querySelector("#hamburgerSection").id="";const m=e.querySelectorAll("a");if(m.forEach((e,t)=>{t!==m.length-1&&(e.style.width="auto",e.style.visibility="visible")}),document.querySelector(".desktop-links").querySelectorAll("a").forEach(e=>e.addEventListener("click",(function(e){y(e)}))),t.addEventListener("click",(function(e){t.classList.add("hamburger__section__opened"),t.addEventListener("animationend",()=>{t.classList.add("hamburger__section__finally_opened"),t.querySelectorAll("a").forEach((e,t)=>{t!==m.length-1&&(e.style.width=m[t].offsetWidth+"px",e.addEventListener("click",(function(e){y(e)})))})})})),i){const e=document.querySelector(".section-slider-desktop").querySelectorAll(".section-desktop"),t=document.getElementById("primarySwiperDesktop");e.forEach(e=>{e.addEventListener("click",(function(){o(e.dataset.order),d(e),e.addEventListener("transitionend",()=>{t.style.top="0",setTimeout(()=>t.classList.add("showed"),350)})}))});const i=document.querySelector(".inner-section-slider"),l=(new Swiper(".projects-slider",{direction:"vertical",loop:!1,slidesPerView:2,spaceBetween:15,scrollbar:{verticalClass:"d-none"},navigation:{nextEl:".projects-next",prevEl:".projects-prev",lockClass:"d-none"}}),e=>{new Swiper("#innerPrimarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,centeredSlides:!1,keyboard:{enabled:!0,onlyInViewport:!0},initialSlide:Number(e),on:{transitionEnd:function(e){console.log(e.slides[e.activeIndex].childNode)}}})});new Swiper("#primarySlider",{slidesPerView:"auto",centeredSlides:!1,spaceBetween:0,loop:!0,loopedSlides:4,initialSlide:0,on:{init:function(){this.slides.forEach((e,t)=>{e.style.zIndex=this.slides.length-t}),this.slides[this.activeIndex].style.zIndex=10},click:function(e,t){const s=t.path.find(e=>{if(e.classList)return Array.from(e.classList).includes("swiper-slide-active")});s&&(s.style.width="102%",s.style.boxShadow="none",e.disable(),s.addEventListener("transitionend",(function(){const e=s.querySelector(".section");let t;switch(e.dataset.name){case"about":t=e.querySelector(".slide-3"),t.querySelector(".inner-section-slider")||(e.querySelector(".slide-3").insertAdjacentElement("afterbegin",i.cloneNode(!0)),i.innerHTML="",l(e.dataset.inner),c(e));break;case"hobby":case"projects":case"media":t=e.querySelector(".slide-2"),t.querySelector(".inner-section-slider")||(e.querySelector(".slide-2").insertAdjacentElement("afterbegin",i.cloneNode(!0)),i.innerHTML="",l(e.dataset.inner),c(e))}})))}}})}if(a(".black-slider")&&new Swiper(".black-slider",{direction:"vertical",loop:!0,slidesPerView:2,spaceBetween:24,scrollbar:{verticalClass:"d-none"},on:{afterInit:function(){let e=600;this.slides.forEach((t,i)=>{setTimeout(()=>{t.style.opacity="1"},e),e+=200})}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".black-slider-next",prevEl:".black-slider-prev",lockClass:"d-none"}}),l){p&&clearInterval(S);let e=200;l.querySelectorAll(".news-item").forEach(t=>{setTimeout(()=>t.style.opacity=1,e),e+=200}),new Swiper(".horizontal-desktop-slider",{direction:"vertical",slidesPerView:"auto",spaceBetween:10,loop:!1,breakpoints:{996:{slidesPerView:3,direction:"horizontal",spaceBetween:36}},keyboard:{enabled:!0,onlyInViewport:!0},mousewheel:!0,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev",lockClass:"d-none"}})}a(".single-page")&&s(".single-slider","auto",30)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
